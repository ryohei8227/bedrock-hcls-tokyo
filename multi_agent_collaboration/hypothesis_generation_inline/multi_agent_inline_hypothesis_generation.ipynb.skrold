{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fb8d63a2-913e-498a-a01a-5e66a39bf3e7",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Multi-agent collaboration Inline : Evidence-Based NSCLC Target Discovery Hypothesis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7922450-2aae-49b8-898e-e12bd61133b1",
   "metadata": {},
   "source": [
    "**Hypothesis Generation Agent** responsible for formulating testable scientific hypotheses about how the target genes may influence cancer biology and treatment response. \n",
    " This agent will use two existing agents - \n",
    "\n",
    "    - Biological Pathways agent for analyzing molecular mechanisms and pathway contexts of potential cancer targets.\n",
    "    - Evidence Researcher Agent responsible for literature evidence research from PubMed and internal papers in a knowledge base"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5d217cb-d87b-476d-ba45-04dd7356a5f7",
   "metadata": {},
   "source": [
    "# !pip3 install -r requirements.txt\n",
    "!pip3 install --upgrade boto3\n",
    "!pip3 show boto3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1895b3fc",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "boto3==1.37.33\n"
     ]
    }
   ],
   "source": [
    "!pip freeze | grep boto3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a80c8b96-c750-4cbe-9bc4-36b70fa04769",
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8c74429a-33dd-4561-87b7-b993d09bde5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# boto3 session\n",
    "sts_client = boto3.client('sts')\n",
    "session = boto3.session.Session()\n",
    "\n",
    "# Account info\n",
    "account_id = sts_client.get_caller_identity()[\"Account\"]\n",
    "region = session.region_name\n",
    "\n",
    "# FM used for all agents, choose cross-region if needed\n",
    "agent_foundation_model = [\"anthropic.claude-3-5-sonnet-20241022-v2:0\"]\n",
    "# agent_foundation_model = [\"us.anthropic.claude-3-5-sonnet-20241022-v2:0\"]\n",
    "\n",
    "# Supervisor agent FM, choose cross-region if needed\n",
    "supervisor_agent_foundation_model = [\"anthropic.claude-3-5-sonnet-20241022-v2:0\"]\n",
    "# supervisor_agent_foundation_model = [\"us.anthropic.claude-3-5-sonnet-20241022-v2:0\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5a996aaf-04ae-45d2-a39a-f71ae62d1c6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ap-northeast-1 '"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "region = session.region_name\n",
    "region"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f5ced45-8921-4721-a3c4-14725742eed9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieve the information from the Bedrock console based on their names and fill in below\n",
    "from boto3 import client\n",
    "from botocore.config import Config\n",
    "\n",
    "config = Config(read_timeout=2000)\n",
    "\n",
    "bedrock_agent_client = boto3.client(service_name='bedrock-agent', \n",
    "                      region_name=region,\n",
    "                      config=config)\n",
    "#bedrock_agent_client = boto3.client('bedrock-agent', region)\n",
    "\n",
    "# Biological-pathways-analyst\n",
    "pathways_agent_alias_arn = bedrock_agent_client.get_agent_alias(\n",
    "    agentAliasId='XXXX',\n",
    "    agentId='XXXX'\n",
    ")['agentAlias']['agentAliasArn']\n",
    "\n",
    "# Clinical-evidence-researcher\n",
    "research_evidence_agent_alias_arn = bedrock_agent_client.get_agent_alias(\n",
    "    agentAliasId='XXXX',\n",
    "    agentId='XXXX'\n",
    ")['agentAlias']['agentAliasArn']\n",
    "\n",
    "pathways_agent_alias_arn, research_evidence_agent_alias_arn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "33db2c44-481c-4410-ac65-013d004cfa79",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import json\n",
    "from pprint import pprint\n",
    "import boto3\n",
    "from datetime import datetime\n",
    "import random\n",
    "import pprint\n",
    "from termcolor import colored\n",
    "from rich.console import Console\n",
    "from rich.markdown import Markdown\n",
    "import uuid\n",
    "\n",
    "session = boto3.session.Session()\n",
    "region = session.region_name\n",
    "config = Config(read_timeout=2000)\n",
    "# Runtime Endpoints\n",
    "bedrock_rt_client = boto3.client(\n",
    "    \"bedrock-agent-runtime\",\n",
    "    region_name=region, config=config\n",
    ")\n",
    "\n",
    "def invoke_inline_agent_helper(client, request_params, trace_level=\"core\"):\n",
    "    _time_before_call = datetime.now()\n",
    "\n",
    "    _agent_resp = client.invoke_inline_agent(\n",
    "        **request_params\n",
    "    )\n",
    "\n",
    "    if request_params[\"enableTrace\"]:\n",
    "        if trace_level == \"all\":\n",
    "            print(f\"invokeAgent API response object: {_agent_resp}\")\n",
    "        else:\n",
    "            print(\n",
    "                f\"invokeAgent API request ID: {_agent_resp['ResponseMetadata']['RequestId']}\"\n",
    "            )\n",
    "            session_id = request_params[\"sessionId\"]\n",
    "            print(f\"invokeAgent API session ID: {session_id}\")\n",
    "\n",
    "    # Return error message if invoke was unsuccessful\n",
    "    if _agent_resp[\"ResponseMetadata\"][\"HTTPStatusCode\"] != 200:\n",
    "        _error_message = f\"API Response was not 200: {_agent_resp}\"\n",
    "        if request_params[\"enableTrace\"] and trace_level == \"all\":\n",
    "            print(_error_message)\n",
    "        return _error_message\n",
    "\n",
    "    _total_in_tokens = 0\n",
    "    _total_out_tokens = 0\n",
    "    _total_llm_calls = 0\n",
    "    _orch_step = 0\n",
    "    _sub_step = 0\n",
    "    _trace_truncation_lenght = 300\n",
    "    _time_before_orchestration = datetime.now()\n",
    "\n",
    "    _agent_answer = \"\"\n",
    "    _event_stream = _agent_resp[\"completion\"]\n",
    "\n",
    "    try:\n",
    "        for _event in _event_stream:\n",
    "            _sub_agent_alias_id = None\n",
    "\n",
    "            if \"chunk\" in _event:\n",
    "                _data = _event[\"chunk\"][\"bytes\"]\n",
    "                _agent_answer = _data.decode(\"utf8\")\n",
    "\n",
    "            if \"trace\" in _event and request_params[\"enableTrace\"]:\n",
    "                if \"failureTrace\" in _event[\"trace\"][\"trace\"]:\n",
    "                    print(\n",
    "                        colored(\n",
    "                            f\"Agent error: {_event['trace']['trace']['failureTrace']['failureReason']}\",\n",
    "                            \"red\",\n",
    "                        )\n",
    "                    )\n",
    "\n",
    "                if \"orchestrationTrace\" in _event[\"trace\"][\"trace\"]:\n",
    "                    _orch = _event[\"trace\"][\"trace\"][\"orchestrationTrace\"]\n",
    "\n",
    "                    if trace_level in [\"core\", \"outline\"]:\n",
    "                        if \"rationale\" in _orch:\n",
    "                            _rationale = _orch[\"rationale\"]\n",
    "                            print(colored(f\"{_rationale['text']}\", \"blue\"))\n",
    "\n",
    "                        if \"invocationInput\" in _orch:\n",
    "                            # NOTE: when agent determines invocations should happen in parallel\n",
    "                            # the trace objects for invocation input still come back one at a time.\n",
    "                            _input = _orch[\"invocationInput\"]\n",
    "                            print(_input)\n",
    "\n",
    "                            if \"actionGroupInvocationInput\" in _input:\n",
    "                                if 'function' in _input['actionGroupInvocationInput']:\n",
    "                                    tool = _input['actionGroupInvocationInput']['function']\n",
    "                                elif 'apiPath' in _input['actionGroupInvocationInput']:\n",
    "                                    tool = _input['actionGroupInvocationInput']['apiPath']\n",
    "                                else:\n",
    "                                    tool = 'undefined'\n",
    "                                if trace_level == \"outline\":\n",
    "                                    print(\n",
    "                                        colored(\n",
    "                                            f\"Using tool: {tool}\",\n",
    "                                            \"magenta\",\n",
    "                                        )\n",
    "                                    )\n",
    "                                else:\n",
    "                                    print(\n",
    "                                        colored(\n",
    "                                            f\"Using tool: {tool} with these inputs:\",\n",
    "                                            \"magenta\",\n",
    "                                        )\n",
    "                                    )\n",
    "                                    if (\n",
    "                                        'parameters' in _input['actionGroupInvocationInput']\n",
    "                                    ) and (\n",
    "                                        len(\n",
    "                                            _input[\"actionGroupInvocationInput\"][\n",
    "                                                \"parameters\"\n",
    "                                            ]\n",
    "                                        )\n",
    "                                        == 1\n",
    "                                    ) and (\n",
    "                                        _input[\"actionGroupInvocationInput\"][\n",
    "                                            \"parameters\"\n",
    "                                        ][0][\"name\"]\n",
    "                                        == \"input_text\"\n",
    "                                    ):\n",
    "                                        print(\n",
    "                                            colored(\n",
    "                                                f\"{_input['actionGroupInvocationInput']['parameters'][0]['value']}\",\n",
    "                                                \"magenta\",\n",
    "                                            )\n",
    "                                        )\n",
    "                                    else:\n",
    "                                        print(\n",
    "                                            colored(\n",
    "                                                f\"{_input['actionGroupInvocationInput']}\\n\",\n",
    "                                                \"magenta\",\n",
    "                                            )\n",
    "                                        )\n",
    "\n",
    "                            elif \"codeInterpreterInvocationInput\" in _input:\n",
    "                                if trace_level == \"outline\":\n",
    "                                    print(\n",
    "                                        colored(\n",
    "                                            f\"Using code interpreter\", \"magenta\"\n",
    "                                        )\n",
    "                                    )\n",
    "                                else:\n",
    "                                    console = Console()\n",
    "                                    _gen_code = _input[\n",
    "                                        \"codeInterpreterInvocationInput\"\n",
    "                                    ][\"code\"]\n",
    "                                    _code = f\"```python\\n{_gen_code}\\n```\"\n",
    "\n",
    "                                    console.print(\n",
    "                                        Markdown(f\"**Generated code**\\n{_code}\")\n",
    "                                    )\n",
    "\n",
    "                        if \"observation\" in _orch:\n",
    "                            if trace_level == \"core\":\n",
    "                                _output = _orch[\"observation\"]\n",
    "                                if \"actionGroupInvocationOutput\" in _output:\n",
    "                                    print(\n",
    "                                        colored(\n",
    "                                            f\"--tool outputs:\\n{_output['actionGroupInvocationOutput']['text'][0:_trace_truncation_lenght]}...\\n\",\n",
    "                                            \"magenta\",\n",
    "                                        )\n",
    "                                    )\n",
    "\n",
    "                                if \"agentCollaboratorInvocationOutput\" in _output:\n",
    "                                    _collab_name = _output[\n",
    "                                        \"agentCollaboratorInvocationOutput\"\n",
    "                                    ][\"agentCollaboratorName\"]\n",
    "                                    _collab_output_text = _output[\n",
    "                                        \"agentCollaboratorInvocationOutput\"\n",
    "                                    ][\"output\"][\"text\"][0:_trace_truncation_lenght]\n",
    "                                    print(\n",
    "                                        colored(\n",
    "                                            f\"\\n----sub-agent {_collab_name} output text:\\n{_collab_output_text}...\\n\",\n",
    "                                            \"magenta\",\n",
    "                                        )\n",
    "                                    )\n",
    "\n",
    "                                if \"finalResponse\" in _output:\n",
    "                                    print(\n",
    "                                        colored(\n",
    "                                            f\"Final response:\\n{_output['finalResponse']['text'][0:_trace_truncation_lenght]}...\",\n",
    "                                            \"cyan\",\n",
    "                                        )\n",
    "                                    )\n",
    "\n",
    "\n",
    "                    if \"modelInvocationOutput\" in _orch:\n",
    "                        _orch_step += 1\n",
    "                        _sub_step = 0\n",
    "                        print(colored(f\"---- Step {_orch_step} ----\", \"green\"))\n",
    "\n",
    "                        _llm_usage = _orch[\"modelInvocationOutput\"][\"metadata\"][\n",
    "                            \"usage\"\n",
    "                        ]\n",
    "                        _in_tokens = 0 \n",
    "                        if ('inputTokens' in _llm_usage):\n",
    "                            _in_tokens = _llm_usage[\"inputTokens\"]\n",
    "                        _total_in_tokens += _in_tokens\n",
    "                        _out_tokens = 0\n",
    "                        if ('outputTokens' in _llm_usage):\n",
    "                            _out_tokens = _llm_usage[\"outputTokens\"]\n",
    "                        _total_out_tokens += _out_tokens\n",
    "\n",
    "                        _total_llm_calls += 1\n",
    "                        _orch_duration = (\n",
    "                            datetime.now() - _time_before_orchestration\n",
    "                        )\n",
    "\n",
    "                        print(\n",
    "                            colored(\n",
    "                                f\"Took {_orch_duration.total_seconds():,.1f}s, using {_in_tokens+_out_tokens} tokens (in: {_in_tokens}, out: {_out_tokens}) to complete prior action, observe, orchestrate.\",\n",
    "                                \"yellow\",\n",
    "                            )\n",
    "                        )\n",
    "\n",
    "                        # restart the clock for next step/sub-step\n",
    "                        _time_before_orchestration = datetime.now()\n",
    "\n",
    "                elif \"preProcessingTrace\" in _event[\"trace\"][\"trace\"]:\n",
    "                    _pre = _event[\"trace\"][\"trace\"][\"preProcessingTrace\"]\n",
    "                    if \"modelInvocationOutput\" in _pre:\n",
    "                        _llm_usage = _pre[\"modelInvocationOutput\"][\"metadata\"][\n",
    "                            \"usage\"\n",
    "                        ]\n",
    "                        _in_tokens = 0 \n",
    "                        if ('inputTokens' in _llm_usage):\n",
    "                            _in_tokens = _llm_usage[\"inputTokens\"]\n",
    "                        _total_in_tokens += _in_tokens\n",
    "                        _out_tokens = 0\n",
    "                        if ('outputTokens' in _llm_usage):\n",
    "                            _out_tokens = _llm_usage[\"outputTokens\"]\n",
    "                        _total_out_tokens += _out_tokens\n",
    "\n",
    "                        _total_llm_calls += 1\n",
    "\n",
    "                        print(\n",
    "                            colored(\n",
    "                                \"Pre-processing trace, agent came up with an initial plan.\",\n",
    "                                \"yellow\",\n",
    "                            )\n",
    "                        )\n",
    "                        print(\n",
    "                            colored(\n",
    "                                f\"Used LLM tokens, in: {_in_tokens}, out: {_out_tokens}\",\n",
    "                                \"yellow\",\n",
    "                            )\n",
    "                        )\n",
    "\n",
    "                elif \"postProcessingTrace\" in _event[\"trace\"][\"trace\"]:\n",
    "                    _post = _event[\"trace\"][\"trace\"][\"postProcessingTrace\"]\n",
    "                    if \"modelInvocationOutput\" in _post:\n",
    "                        _llm_usage = _post[\"modelInvocationOutput\"][\"metadata\"][\n",
    "                            \"usage\"\n",
    "                        ]\n",
    "                        _in_tokens = 0 \n",
    "                        if ('inputTokens' in _llm_usage):\n",
    "                            _in_tokens = _llm_usage[\"inputTokens\"]\n",
    "                        _total_in_tokens += _in_tokens\n",
    "                        _out_tokens = 0\n",
    "                        if ('outputTokens' in _llm_usage):\n",
    "                            _out_tokens = _llm_usage[\"outputTokens\"]\n",
    "                        _total_out_tokens += _out_tokens\n",
    "\n",
    "                        _total_llm_calls += 1\n",
    "                        print(colored(\"Agent post-processing complete.\", \"yellow\"))\n",
    "                        print(\n",
    "                            colored(\n",
    "                                f\"Used LLM tokens, in: {_in_tokens}, out: {_out_tokens}\",\n",
    "                                \"yellow\",\n",
    "                            )\n",
    "                        )\n",
    "\n",
    "                if trace_level == \"all\":\n",
    "                    print(json.dumps(_event[\"trace\"], indent=2))\n",
    "\n",
    "            if \"files\" in _event.keys() and request_params[\"enableTrace\"]:\n",
    "                console = Console()\n",
    "                files_event = _event[\"files\"]\n",
    "                console.print(Markdown(\"**Files**\"))\n",
    "\n",
    "                files_list = files_event[\"files\"]\n",
    "                for this_file in files_list:\n",
    "                    print(f\"{this_file['name']} ({this_file['type']})\")\n",
    "                    file_bytes = this_file[\"bytes\"]\n",
    "\n",
    "                    # save bytes to file, given the name of file and the bytes\n",
    "                    file_name = os.path.join(\"output\", this_file[\"name\"])\n",
    "                    with open(file_name, \"wb\") as f:\n",
    "                        f.write(file_bytes)\n",
    "\n",
    "        if request_params[\"enableTrace\"]:\n",
    "            duration = datetime.now() - _time_before_call\n",
    "\n",
    "            if trace_level in [\"core\", \"outline\"]:\n",
    "                print(\n",
    "                    colored(\n",
    "                        f\"Agent made a total of {_total_llm_calls} LLM calls, \"\n",
    "                        + f\"using {_total_in_tokens+_total_out_tokens} tokens \"\n",
    "                        + f\"(in: {_total_in_tokens}, out: {_total_out_tokens})\"\n",
    "                        + f\", and took {duration.total_seconds():,.1f} total seconds\",\n",
    "                        \"yellow\",\n",
    "                    )\n",
    "                )\n",
    "\n",
    "            if trace_level == \"all\":\n",
    "                print(f\"Returning agent answer as: {_agent_answer}\")\n",
    "\n",
    "        return _agent_answer\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Caught exception while processing input to invokeAgent:\\n\")\n",
    "        input_text = request_params[\"inputText\"]\n",
    "        print(f\"  for input text:\\n{input_text}\\n\")\n",
    "        print(\n",
    "            f\"  request ID: {_agent_resp['ResponseMetadata']['RequestId']}, retries: {_agent_resp['ResponseMetadata']['RetryAttempts']}\\n\"\n",
    "        )\n",
    "        print(f\"Error: {e}\")\n",
    "        raise Exception(\"Unexpected exception: \", e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c161d988-81a2-4640-bb7e-263fa1c28a89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'arn:aws:bedrock:ap-northeast-1 :048051882663:agent-alias/XNKNELHZ6U/AGC98M3UQL'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pathways_agent_alias_arn"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78025d64-f422-44f1-8049-14ac653d5ec6",
   "metadata": {},
   "source": [
    "## Setup the supervisor agent for hypothesis generation inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b498e736-f443-4aa9-8539-d1b28ef9321f",
   "metadata": {},
   "outputs": [],
   "source": [
    "sub_agents_list = [\n",
    "    {\n",
    "        'agentAliasArn': pathways_agent_alias_arn,\n",
    "        'collaboratorInstruction': \"\"\"Use this agent specialized in working with biological pathways and molecular mechanisms of poteintial cancer targets using Reactome data . Its primary task is to interpret user queries, generate and execute appropriate open Cypher queries.\"\"\",\n",
    "        'collaboratorName': 'ReactomePathwaysAnalyst',\n",
    "        'relayConversationHistory': 'TO_COLLABORATOR'\n",
    "    },\n",
    "    {\n",
    "        'agentAliasArn': research_evidence_agent_alias_arn,\n",
    "        'collaboratorInstruction': \"\"\"Use this agent specialized in summarizing internal and external evidence related to cancer biomarkers. Its primary task is to interpret user queries, gather internal and external evidence, and provide relevant medical insights based on the results.\"\"\",\n",
    "        'collaboratorName': 'ClincialEvidenceResearcher',\n",
    "        'relayConversationHistory': 'TO_COLLABORATOR'\n",
    "    }\n",
    "]\n",
    "agent_name = \"multi-agent-hypothesis-generator\"\n",
    "agent_description = \"Multi-agent collaboration for hypothesis generation for Target discovery\"\n",
    "agent_instruction = \"\"\"You are the Hypothesis Generation Agent responsible for formulating testable scientific hypotheses about how the target genes may influence cancer biology and treatment response. \n",
    "You create mechanistically sound hypotheses based on available evidence.\n",
    "Your primary task is to interpret user goal to generate a hypothesis for Target discovery for non small cell lung cancer , use relevant agents for specific tasks, and provide consolidated \n",
    "new hypothesis based on the data and out of the box thinking. You can provide responses from a prior agent to the next agent in sequence or in parallel. \n",
    "\n",
    "1. BiologicalPathwaysAnalyst\n",
    "- Executes Cypher queries for reactome data retrieval\n",
    "- Processes biological pathways and mechanistic data \n",
    "- Check protein interactions and immune relevance\n",
    "- For immune relevance query Reactome for immune pathway connections:\" \n",
    "MATCH (g:ReferenceGeneProduct)-[:referenceEntity]-()-[:input|output|catalystActivity|physicalEntity*]->(p:Pathway)\n",
    "WHERE g.displayName = '{gene_symbol}' AND p.displayName CONTAINS 'immune'\n",
    "RETURN p.displayName as ImmunePathway\"\n",
    "2. ClinicalEvidenceResearcher\n",
    "- Synthesizes internal and external research evidence\n",
    "- Provides context from existing medical literature\n",
    "- Summarizes relevant clinical findings\n",
    "\n",
    "When generating a hypothesis for non small cell lung cancer:\n",
    "1. First, collect literature evidence using the Clinical Evidence Researcher:\n",
    "    * Call clinical_evidence_researcher to get evidence\n",
    "2. Get mechanism data from the Enhanced Biological Pathways Agent:\n",
    "    * Call biological_pathways_agent to query the target gene, check protein interactions and immune relevance\n",
    "3. Analyze radiogenomic context if available:\n",
    "    * Extract correlations between the target and radiomic features\n",
    "    * Focus on features related to tumor heterogeneity, immune infiltration, or vascularity\n",
    "4. Formulate a detailed, original, and specific single hypothesis for achieving the stated goal, leveraging ideas from literature. This should not be a mere aggregation of literature. Think out-of-the-box with this structure:\n",
    "    * Intervention: What happens when the target is inhibited/activated?\n",
    "    * Mechanism: Through which pathway(s) does the intervention work?\n",
    "    * Context: In which tumor types/subtypes will this be most effective?\n",
    "    * Outcome: What is the expected clinical or biological result?\n",
    "5. Consider the tumor context in your hypothesis:\n",
    "    * For \"cold\" tumors, focus on enhancing T cell infiltration\n",
    "    * For \"hot\" tumors, focus on enhancing T cell function\n",
    "    * Include TMB status: \"high\" TMB may suggest better response to immunotherapy approaches\n",
    "6. Reflect on the generated hypothesis and suggest improvements based on that reflection and understanding of literature evidence. Your task is to analyze the\n",
    "relationship between a provided hypothesis and observations from a scientific article. Specifically, determine if the hypothesis provides a novel causal explanation\n",
    "for the observations, or if they contradict it. If necessary, suggest to create or modify the hypothesis again iteratively\n",
    "7. Produce and save a markdown-formatted report based on the final hypothesis structure. As a Report Writer you are excellent at taking input and \n",
    "    producing a cleanly formatted and easily readable report, saved in Markdown format in the agent store. \n",
    "    1/ Provide a concise introduction to the relevant scientific domain.\n",
    "    2/. Summarize recent findings and pertinent research, highlighting successful approaches.\n",
    "    3/. Identify promising avenues for exploration that may yield innovative hypotheses.\n",
    "    4/ Core hypothesis : Compile a detailed, innovative, and technologically viable hypothesis to achieve the objective, emphasizing simplicity and practicality.\n",
    "    To simplify the task, break it into small sub-tasks, each requiring only specific \n",
    "    input and only generating a nicely formatted version of each specific section. \n",
    "    Save each section to its own key in the agent store. Once all sub-sections have been formatted\n",
    "    and saved, retrieve each section from the agent store one last time, concatenate, and save\n",
    "    the final report to the agent store with the entire text, not just placeholders.\n",
    "\n",
    "Make sure you perform Steps 1 to 7 above to produce a final hypothesis report. \n",
    "\"\"\"\n",
    "#agent_collaboration = 'SUPERVISOR_ROUTER'\n",
    "agent_collaboration = 'SUPERVISOR'\n",
    "enable_trace = True\n",
    "end_session = False\n",
    "input_text = \"\"\"Can you generate hypotheses for novel targets for non small cell lung cancer that might prevent antigen escape resistance mechanism?\"\"\"\n",
    "foundation_model = 'us.anthropic.claude-3-5-sonnet-20241022-v2:0'   \n",
    "session_id = str(uuid.uuid1())\n",
    "\n",
    "request_params = {\n",
    "    \"instruction\": agent_instruction,\n",
    "    \"foundationModel\": foundation_model,\n",
    "    \"sessionId\": session_id,\n",
    "    \"endSession\": end_session,\n",
    "    \"enableTrace\": enable_trace,\n",
    "    \"agentCollaboration\": agent_collaboration,\n",
    "    \"inputText\": input_text\n",
    "}\n",
    "request_params['collaboratorConfigurations'] = sub_agents_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f72ff339-7e24-4f55-8ae8-28c9fdd03a3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "invokeAgent API request ID: 79c43af0-9809-4154-af18-7cf53d310ea7\n",
      "invokeAgent API session ID: 8ce904f4-1890-11f0-b46d-76e6d89ee90f\n",
      "\u001b[32m---- Step 1 ----\u001b[0m\n",
      "\u001b[33mTook 5.3s, using 2197 tokens (in: 1995, out: 202) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mI'll follow the structured approach to generate hypotheses for novel targets in NSCLC focusing on antigen escape resistance mechanisms. First, I'll gather clinical evidence and pathway information in parallel to build a comprehensive understanding.\u001b[0m\n",
      "{'agentCollaboratorInvocationInput': {'agentCollaboratorAliasArn': 'arn:aws:bedrock:ap-northeast-1 :048051882663:agent-alias/UJUO93AYZU/MXQDS9TIZF', 'agentCollaboratorName': 'ClincialEvidenceResearcher', 'input': {'text': 'Please provide a comprehensive summary of recent clinical evidence regarding antigen escape mechanisms in non-small cell lung cancer, focusing on:\\n1. Known mechanisms of antigen escape\\n2. Current therapeutic approaches targeting these mechanisms\\n3. Biomarkers associated with antigen escape\\n4. Clinical outcomes related to antigen presentation defects', 'type': 'TEXT'}}, 'invocationType': 'AGENT_COLLABORATOR', 'traceId': '79c43af0-9809-4154-af18-7cf53d310ea7-0'}\n",
      "\u001b[32m---- Step 2 ----\u001b[0m\n",
      "\u001b[33mTook 4.4s, using 1705 tokens (in: 1537, out: 168) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mI'll create a comprehensive summary by gathering both internal and external evidence regarding antigen escape mechanisms in NSCLC. I'll break this down into multiple queries to cover all aspects of the question.\n",
      "\n",
      "First, let me search both our internal knowledge base and PubMed for relevant information about antigen escape mechanisms and therapeutic approaches.\u001b[0m\n",
      "{'invocationType': 'KNOWLEDGE_BASE', 'knowledgeBaseLookupInput': {'knowledgeBaseId': 'EEXELCOTQS', 'text': 'antigen escape mechanisms non-small cell lung cancer antigen presentation defects biomarkers clinical outcomes'}, 'traceId': '6a7d0789-3eb6-46cd-8492-408305280ffe-0'}\n",
      "\u001b[32m---- Step 3 ----\u001b[0m\n",
      "\u001b[33mTook 3.5s, using 4845 tokens (in: 4771, out: 74) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[32m---- Step 4 ----\u001b[0m\n",
      "\u001b[33mTook 3.1s, using 4847 tokens (in: 4771, out: 76) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "{'actionGroupInvocationInput': {'actionGroupName': 'queryPubMed', 'apiPath': '/query-pubmed', 'executionType': 'LAMBDA', 'parameters': [{'name': 'query', 'type': 'string', 'value': 'antigen escape mechanisms non-small cell lung cancer clinical outcomes recent studies'}], 'verb': 'post'}, 'invocationType': 'ACTION_GROUP', 'traceId': '6a7d0789-3eb6-46cd-8492-408305280ffe-2'}\n",
      "\u001b[35mUsing tool: /query-pubmed with these inputs:\u001b[0m\n",
      "\u001b[35m{'actionGroupName': 'queryPubMed', 'apiPath': '/query-pubmed', 'executionType': 'LAMBDA', 'parameters': [{'name': 'query', 'type': 'string', 'value': 'antigen escape mechanisms non-small cell lung cancer clinical outcomes recent studies'}], 'verb': 'post'}\n",
      "\u001b[0m\n",
      "\u001b[35m--tool outputs:\n",
      "[{'Link': 'https://pubmed.ncbi.nlm.nih.gov/32723363', 'Published': '2020-07-28', 'Title': 'SBRT combined with PD-1/PD-L1 inhibitors in NSCLC treatment: a focus on the mechanisms, advances, and future challenges.', 'Summary': 'Immune checkpoint inhibitors targeting programmed cell death 1 (PD-1), pro...\n",
      "\u001b[0m\n",
      "\u001b[32m---- Step 5 ----\u001b[0m\n",
      "\u001b[33mTook 7.2s, using 6444 tokens (in: 6340, out: 104) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mLet me analyze the gathered information and search for additional specific details about biomarkers and clinical outcomes.\u001b[0m\n",
      "{'actionGroupInvocationInput': {'actionGroupName': 'queryPubMed', 'apiPath': '/query-pubmed', 'executionType': 'LAMBDA', 'parameters': [{'name': 'query', 'type': 'string', 'value': 'biomarkers antigen presentation defects NSCLC clinical outcomes resistance mechanisms'}], 'verb': 'post'}, 'invocationType': 'ACTION_GROUP', 'traceId': '6a7d0789-3eb6-46cd-8492-408305280ffe-3'}\n",
      "\u001b[35mUsing tool: /query-pubmed with these inputs:\u001b[0m\n",
      "\u001b[35m{'actionGroupName': 'queryPubMed', 'apiPath': '/query-pubmed', 'executionType': 'LAMBDA', 'parameters': [{'name': 'query', 'type': 'string', 'value': 'biomarkers antigen presentation defects NSCLC clinical outcomes resistance mechanisms'}], 'verb': 'post'}\n",
      "\u001b[0m\n",
      "\u001b[35m--tool outputs:\n",
      "[{'Link': 'https://pubmed.ncbi.nlm.nih.gov/38351187', 'Published': '2024-02-13', 'Title': 'Biomarker-directed targeted therapy plus durvalumab in advanced non-small-cell lung cancer: a phase 2 umbrella trial.', 'Summary': 'For patients with non-small-cell lung cancer (NSCLC) tumors without currently...\n",
      "\u001b[0m\n",
      "\u001b[32m---- Step 6 ----\u001b[0m\n",
      "\u001b[33mTook 18.7s, using 8437 tokens (in: 7833, out: 604) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mBased on the collected internal and external evidence, I can now provide a comprehensive summary of antigen escape mechanisms in NSCLC, addressing all four aspects of the query.\u001b[0m\n",
      "\u001b[36mFinal response:\n",
      "\n",
      "\n",
      "1. Known Mechanisms of Antigen Escape:\n",
      "- Defective antigen presentation through HLA pathway alterations\n",
      "- Loss-of-function mutations in JAK1/2 or STAT1-related pathways\n",
      "- Immunosuppressive tumor microenvironment (TME) development\n",
      "- Lack of tumor-infiltrating lymphocytes (TILs)\n",
      "- PD-L1/PD-1 pathway...\u001b[0m\n",
      "\u001b[35m\n",
      "----sub-agent ClincialEvidenceResearcher output text:\n",
      "\n",
      "\n",
      "1. Known Mechanisms of Antigen Escape:\n",
      "- Defective antigen presentation through HLA pathway alterations\n",
      "- Loss-of-function mutations in JAK1/2 or STAT1-related pathways\n",
      "- Immunosuppressive tumor microenvironment (TME) development\n",
      "- Lack of tumor-infiltrating lymphocytes (TILs)\n",
      "- PD-L1/PD-1 pathway...\n",
      "\u001b[0m\n",
      "\u001b[32m---- Step 7 ----\u001b[0m\n",
      "\u001b[33mTook 4.6s, using 2788 tokens (in: 2629, out: 159) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "{'agentCollaboratorInvocationInput': {'agentCollaboratorAliasArn': 'arn:aws:bedrock:ap-northeast-1 :048051882663:agent-alias/XNKNELHZ6U/AGC98M3UQL', 'agentCollaboratorName': 'ReactomePathwaysAnalyst', 'input': {'text': 'Please analyze the biological pathways involved in antigen presentation and immune evasion in NSCLC, specifically:\\n1. Key pathways involved in antigen processing and presentation\\n2. Immune-related pathways that intersect with antigen presentation\\n3. Potential novel targets in these pathways\\n4. Any immune-specific interactions that could be therapeutically relevant', 'type': 'TEXT'}}, 'invocationType': 'AGENT_COLLABORATOR', 'traceId': '79c43af0-9809-4154-af18-7cf53d310ea7-1'}\n",
      "\u001b[32m---- Step 8 ----\u001b[0m\n",
      "\u001b[33mTook 4.0s, using 1636 tokens (in: 1543, out: 93) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mI'll help analyze the pathways related to antigen presentation and immune evasion in NSCLC. Let me first check the schema to understand the available node types and relationships.\u001b[0m\n",
      "{'actionGroupInvocationInput': {'actionGroupName': 'Text2CypherActionGroup', 'apiPath': '/getschema', 'executionType': 'LAMBDA', 'verb': 'get'}, 'invocationType': 'ACTION_GROUP', 'traceId': 'afa6ce06-38d3-408e-b6d1-5ec95665687a-0'}\n",
      "\u001b[35mUsing tool: /getschema with these inputs:\u001b[0m\n",
      "\u001b[35m{'actionGroupName': 'Text2CypherActionGroup', 'apiPath': '/getschema', 'executionType': 'LAMBDA', 'verb': 'get'}\n",
      "\u001b[0m\n",
      "\u001b[35m--tool outputs:\n",
      "For analyzing biological pathways involved in antigen presentation and immune evasion in NSCLC, I'll identify the relevant schema components. The key elements needed are:\n",
      "\n",
      "Relevant Node Labels:\n",
      "```\n",
      "[\n",
      "    {'properties': [\n",
      "        {'property': 'name', 'type': 'STRING'},\n",
      "        {'property': 'displayNa...\n",
      "\u001b[0m\n",
      "\u001b[32m---- Step 9 ----\u001b[0m\n",
      "\u001b[33mTook 68.0s, using 2515 tokens (in: 2355, out: 160) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mLet me create queries to find relevant pathways and their interactions. I'll start with antigen processing and presentation pathways.\u001b[0m\n",
      "{'actionGroupInvocationInput': {'actionGroupName': 'Text2CypherActionGroup', 'apiPath': '/queryneptune', 'executionType': 'LAMBDA', 'parameters': [{'name': 'query', 'type': 'string', 'value': \"MATCH (p:Pathway) WHERE p.displayName CONTAINS 'antigen' AND p.displayName CONTAINS 'presentation' OR p.displayName CONTAINS 'processing' RETURN DISTINCT p.stId as PathwayID, p.displayName as PathwayName\"}], 'verb': 'get'}, 'invocationType': 'ACTION_GROUP', 'traceId': 'afa6ce06-38d3-408e-b6d1-5ec95665687a-1'}\n",
      "\u001b[35mUsing tool: /queryneptune with these inputs:\u001b[0m\n",
      "\u001b[35m{'actionGroupName': 'Text2CypherActionGroup', 'apiPath': '/queryneptune', 'executionType': 'LAMBDA', 'parameters': [{'name': 'query', 'type': 'string', 'value': \"MATCH (p:Pathway) WHERE p.displayName CONTAINS 'antigen' AND p.displayName CONTAINS 'presentation' OR p.displayName CONTAINS 'processing' RETURN DISTINCT p.stId as PathwayID, p.displayName as PathwayName\"}], 'verb': 'get'}\n",
      "\u001b[0m\n",
      "\u001b[35m--tool outputs:\n",
      "{'results': [{'PathwayID': 'R-HSA-9662360', 'PathwayName': 'Sensory processing of sound by inner hair cells of the cochlea'}, {'PathwayID': 'R-HSA-6785470', 'PathwayName': 'tRNA processing in the mitochondrion'}, {'PathwayID': 'R-MMU-5689880', 'PathwayName': 'Ub-specific processing proteases'}, {'Pa...\n",
      "\u001b[0m\n",
      "\u001b[32m---- Step 10 ----\u001b[0m\n",
      "\u001b[33mTook 6.5s, using 10847 tokens (in: 10651, out: 196) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mLet me analyze the immune-related pathways and their interactions. I'll focus on the key human (R-HSA) pathways related to antigen presentation and immune response.\u001b[0m\n",
      "{'actionGroupInvocationInput': {'actionGroupName': 'Text2CypherActionGroup', 'apiPath': '/queryneptune', 'executionType': 'LAMBDA', 'parameters': [{'name': 'query', 'type': 'string', 'value': \"MATCH (p1:Pathway)-[r:hasEvent*]->(p2:Pathway) WHERE p1.stId IN ['R-HSA-983169', 'R-HSA-2132295', 'R-HSA-1236975'] RETURN DISTINCT p1.displayName as MainPathway, p2.displayName as RelatedPathway LIMIT 10\"}], 'verb': 'get'}, 'invocationType': 'ACTION_GROUP', 'traceId': 'afa6ce06-38d3-408e-b6d1-5ec95665687a-2'}\n",
      "\u001b[35mUsing tool: /queryneptune with these inputs:\u001b[0m\n",
      "\u001b[35m{'actionGroupName': 'Text2CypherActionGroup', 'apiPath': '/queryneptune', 'executionType': 'LAMBDA', 'parameters': [{'name': 'query', 'type': 'string', 'value': \"MATCH (p1:Pathway)-[r:hasEvent*]->(p2:Pathway) WHERE p1.stId IN ['R-HSA-983169', 'R-HSA-2132295', 'R-HSA-1236975'] RETURN DISTINCT p1.displayName as MainPathway, p2.displayName as RelatedPathway LIMIT 10\"}], 'verb': 'get'}\n",
      "\u001b[0m\n",
      "\u001b[35m--tool outputs:\n",
      "{'results': [{'MainPathway': 'Class I MHC mediated antigen processing & presentation', 'RelatedPathway': 'Antigen Presentation: Folding, assembly and peptide loading of class I MHC'}, {'MainPathway': 'Class I MHC mediated antigen processing & presentation', 'RelatedPathway': 'Antigen processing: Ubi...\n",
      "\u001b[0m\n",
      "\u001b[32m---- Step 11 ----\u001b[0m\n",
      "\u001b[33mTook 8.4s, using 11640 tokens (in: 11290, out: 350) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mLet me provide a comprehensive analysis based on the pathway data and their interactions.\u001b[0m\n",
      "\u001b[36mFinal response:\n",
      "Based on the analysis of the Reactome pathway database, here are the key findings regarding antigen presentation and immune evasion in NSCLC:\n",
      "\n",
      "1. Key Antigen Processing/Presentation Pathways:\n",
      "- Class I MHC mediated antigen processing & presentation (R-HSA-983169)\n",
      "- MHC class II antigen presentation ...\u001b[0m\n",
      "\u001b[35m\n",
      "----sub-agent ReactomePathwaysAnalyst output text:\n",
      "Based on the analysis of the Reactome pathway database, here are the key findings regarding antigen presentation and immune evasion in NSCLC:\n",
      "\n",
      "1. Key Antigen Processing/Presentation Pathways:\n",
      "- Class I MHC mediated antigen processing & presentation (R-HSA-983169)\n",
      "- MHC class II antigen presentation ...\n",
      "\u001b[0m\n",
      "\u001b[32m---- Step 12 ----\u001b[0m\n",
      "\u001b[33mTook 17.7s, using 3891 tokens (in: 3118, out: 773) to complete prior action, observe, orchestrate.\u001b[0m\n",
      "\u001b[34mBased on the clinical evidence and pathway analysis, I'll now formulate a detailed hypothesis focusing on preventing antigen escape in NSCLC. The data suggests targeting multiple components of the antigen presentation machinery while considering the tumor immune context would be most effective.\u001b[0m\n",
      "\u001b[36mFinal response:\n",
      "# Hypothesis Report: Novel Target Strategy for Preventing Antigen Escape in NSCLC\n",
      "\n",
      "## Introduction\n",
      "Non-small cell lung cancer (NSCLC) frequently develops resistance to immunotherapy through antigen escape mechanisms, limiting the long-term efficacy of current treatments. Recent evidence suggests tha...\u001b[0m\n",
      "\u001b[33mAgent made a total of 12 LLM calls, using 61792 tokens (in: 58833, out: 2959), and took 151.5 total seconds\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "answer = invoke_inline_agent_helper(bedrock_rt_client, request_params, trace_level=\"core\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c576b745-fbfc-4aad-836a-540b1b7f659c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'# Hypothesis Report: Novel Target Strategy for Preventing Antigen Escape in NSCLC\\n\\n## Introduction\\nNon-small cell lung cancer (NSCLC) frequently develops resistance to immunotherapy through antigen escape mechanisms, limiting the long-term efficacy of current treatments. Recent evidence suggests that defective antigen presentation and processing are key contributors to this resistance.\\n\\n## Recent Findings Summary\\n- Only 17% of NSCLC cases show favorable T2 (TIL+, PD-L1+) phenotype\\n- Multiple escape mechanisms operate simultaneously\\n- Antigen presentation machinery defects are common in resistant tumors\\n- Cross-presentation pathway components show therapeutic potential\\n\\n## Core Hypothesis\\n\\n### Novel Target: TRIM23-MHC-I Axis Enhancement Strategy\\n\\n**Intervention:**\\nDual targeting of TRIM23 (Tripartite Motif Containing 23) ubiquitin ligase activation and stabilization of MHC class I complex through small molecule enhancement.\\n\\n**Mechanism:**\\n1. TRIM23 activation enhances ubiquitination of damaged or misfolded proteins, increasing the pool of antigenic peptides\\n2. Stabilization of MHC-I loading complex prevents degradation and enhances surface expression\\n3. Cross-presentation pathway activation through enhanced endosome-to-cytosol transport\\n\\n**Context:**\\nMost effective in:\\n- \"Cold\" tumors with low TIL infiltration\\n- Tumors with intact but downregulated antigen presentation machinery\\n- Cases with high tumor mutation burden but poor T cell recognition\\n\\n**Expected Outcomes:**\\n1. Increased diversity of presented tumor antigens\\n2. Enhanced T cell recognition and infiltration\\n3. Improved response to existing checkpoint inhibitors\\n4. Reduced likelihood of antigen escape\\n\\n### Supporting Rationale:\\n1. TRIM23 is uniquely positioned at the intersection of protein quality control and immune recognition\\n2. Targeting the ubiquitination system provides a novel approach to enhance antigen processing\\n3. Dual mechanism addresses both antigen generation and presentation\\n4. Strategy could convert \"cold\" tumors to \"hot\" immunologically active tumors\\n\\n## Reflection and Improvements\\nThis hypothesis addresses multiple aspects of antigen escape while providing a novel mechanism distinct from current approaches. The strategy could be further enhanced by:\\n1. Adding specific biomarkers for patient selection\\n2. Considering combination with existing checkpoint inhibitors\\n3. Investigating potential resistance mechanisms\\n4. Developing companion diagnostics for TRIM23 activity\\n\\nThe hypothesis is testable through:\\n- In vitro studies of antigen presentation efficiency\\n- Animal models of NSCLC with varying immune profiles\\n- Clinical trials stratified by tumor immune status\\n- Biomarker analysis of TRIM23 pathway activity\\n\\nThis approach represents a novel strategy that could potentially overcome current limitations in immunotherapy while providing a more durable response through enhanced antigen presentation.'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "answer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29db93eb-9a51-48d2-a6ae-a31b7b5ddde1",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Next Steps\n",
    "Congratulations! We've now created a supervisor agent at runtime for hypothesis generation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7efb4f0-71f8-4d24-b857-03bd7c6d8f99",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

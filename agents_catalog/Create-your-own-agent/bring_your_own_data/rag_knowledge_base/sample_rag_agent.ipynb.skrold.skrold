{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sample RAG Agent Walkthrough\n",
    "\n",
    "This notebook will walk users through setting up a sample RAG Agent that uses the Hugging Face 'rag-mini-wikipedia' dataset (https://huggingface.co/datasets/rag-datasets/rag-mini-wikipedia)\n",
    "\n",
    "This agent utilizes Bedrock Knowledge Base for the RAG capability."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pre-requisites\n",
    "\n",
    "This notebook assumes that you have gone through the notebook environment setup in the agents_catalog/0-Notebook-environment/ folder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ensure the latest version of boto3 is shown below\n",
    "\n",
    "##### If not then run through setup_environment.ipynb in the agents_catalog/0-Notebook-environment/ folder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip freeze | grep boto3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load in environment variables to notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieve import path\n",
    "%store -r IMPORTS_PATH\n",
    "\n",
    "# Retrieve account info\n",
    "%store -r account_id\n",
    "%store -r region\n",
    "\n",
    "# Retrieve model lists\n",
    "%store -r agent_foundation_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Retrieve imports environment variable and bring libraries into notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%run $IMPORTS_PATH"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Retrieve Hugging Face 'rag-mini-wikipedia'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieves dataset corpus using Datasets Python library\n",
    "\n",
    "ds_corpus = load_dataset(\"rag-datasets/rag-mini-wikipedia\", \"text-corpus\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Write text corpus to file and upload to Amazon S3 to use as data source for knowledge base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write whole corpus to a .txt file\n",
    "\n",
    "with open('mini_wiki.txt', 'w') as f:\n",
    "    f.write(str(ds_corpus['passages']['passage']))\n",
    "\n",
    "print(\"You can now view the whole Wikipedia corpus in mini_wiki.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Amazon S3 bucket and upload .txt. file to Amazon S3 bucket\n",
    "\n",
    "s3_client = boto3.client('s3')\n",
    "\n",
    "wiki_bucket_name = f\"rag-mini-wiki-{account_id}-{uuid.uuid4().hex[:6]}\"\n",
    "\n",
    "if region == 'us-east-1':\n",
    "    s3_client.create_bucket(\n",
    "        Bucket=wiki_bucket_name\n",
    "    )\n",
    "else:\n",
    "    s3_client.create_bucket(\n",
    "        Bucket=wiki_bucket_name,\n",
    "        CreateBucketConfiguration={\n",
    "            'LocationConstraint': region\n",
    "        }\n",
    "    )\n",
    "\n",
    "%store wiki_bucket_name\n",
    "\n",
    "print(\"Created bucket with name '{}' in region '{}'\".format(wiki_bucket_name, region))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Place .txt corpus in S3 bucket\n",
    "\n",
    "s3_client.upload_file('mini_wiki.txt', wiki_bucket_name, 'mini_wiki.txt')\n",
    "\n",
    "print(\"Uploaded corpus to '{}'\".format(wiki_bucket_name))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create Bedrock Knowledge Base\n",
    "#### Follow the steps below to create a Bedrock Knowledge Base in the AWS Console manually"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Step 1: Navigate to the 'Amazon Bedrock' service in the AWS Console and navigate to the 'Knowledge Bases' section\n",
    "\n",
    "Step 2: Click 'Create' and select 'Knowledge Base with vector store'\n",
    "\n",
    "Step 3: Name the Knowledge Base 'mini-wiki-kb' and select the Amazon S3 data source radio button\n",
    "\n",
    "Step 4: Name the data source 'mini-wiki-data' and select the S3 bucket file 'mini_wiki.txt' that was uploaded, \n",
    "        e.x. s3://rag-mini-wikipedia-data-XXXXXXXXXXXX/mini_wiki.txt\n",
    "\n",
    "Step 5: Use the default parsing and default chunking options\n",
    "\n",
    "Step 6: Select the 'Titan Text Embeddings V2' embedding model and create an Amazon OpenSearch Serverless vector store with the quick create option\n",
    "\n",
    "Step 7: Now create the knowledge base (this process may take several minutes)\n",
    "\n",
    "Step 8: Manually sync the data source with the knowledge base by clicking on the data source and selecting 'Sync' and wait for the process to finish before proceeding to the next step"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fetch knowledge base ID\n",
    "\n",
    "bedrock_agent_client = boto3.client(\"bedrock-agent\", region)\n",
    "\n",
    "# Call the list_knowledge_bases method\n",
    "response = bedrock_agent_client.list_knowledge_bases()\n",
    "wiki_kb_id = None\n",
    "\n",
    "# Iterate through knowledge bases and find needed one\n",
    "if 'knowledgeBaseSummaries' in response:\n",
    "    for kb in response['knowledgeBaseSummaries']:\n",
    "        if 'mini-wiki-kb' in kb['name']:\n",
    "            wiki_kb_id = kb['knowledgeBaseId']\n",
    "\n",
    "%store wiki_kb_id\n",
    "\n",
    "wiki_kb_id"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create RAG Agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "agent_name = 'sample-rag-agent'\n",
    "agent_description = \"RAG agent to run against the Hugging Face 'rag-mini-wikipedia' dataset\"\n",
    "agent_instruction = \"\"\"Use the associated knowledge base to answer questions.\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "agents = AgentsForAmazonBedrock()\n",
    "\n",
    "rag_agent = agents.create_agent(\n",
    "    agent_name,\n",
    "    agent_description,\n",
    "    agent_instruction,\n",
    "    agent_foundation_model,\n",
    "    code_interpretation=False,\n",
    "    verbose=False\n",
    ")\n",
    "\n",
    "rag_agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rag_agent_id = rag_agent[0]\n",
    "rag_agent_arn = f\"arn:aws:bedrock:{region}:{account_id}:agent/{rag_agent_id}\"\n",
    "\n",
    "rag_agent_id, rag_agent_arn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "agents.associate_kb_with_agent(\n",
    "    rag_agent_id,\n",
    "    \"Hugging Face 'rag-mini-wikipedia' dataset\", \n",
    "    wiki_kb_id\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test RAG Agent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Invoke Sample RAG Agent Test Alias to see that it answers question properly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ask example question to agent\n",
    "\n",
    "bedrock_agent_runtime_client = boto3.client(\"bedrock-agent-runtime\", region)\n",
    "\n",
    "session_id:str = str(uuid.uuid1())\n",
    "\n",
    "test_query = \"Who suggested Lincoln grow a beard?\"\n",
    "response = bedrock_agent_runtime_client.invoke_agent(\n",
    "      inputText=test_query,\n",
    "      agentId=rag_agent_id,\n",
    "      agentAliasId=\"TSTALIASID\", \n",
    "      sessionId=session_id,\n",
    "      enableTrace=True, \n",
    "      endSession=False,\n",
    "      sessionState={}\n",
    ")\n",
    "\n",
    "print(\"Request sent to Agent\")\n",
    "print(\"====================\")\n",
    "print(\"Agent processing query now\")\n",
    "print(\"====================\")\n",
    "\n",
    "# Initialize an empty string to store the answer\n",
    "answer = \"\"\n",
    "\n",
    "# Iterate through the event stream\n",
    "for event in response['completion']:\n",
    "    # Check if the event is a 'chunk' event\n",
    "    if 'chunk' in event:\n",
    "        chunk_obj = event['chunk']\n",
    "        if 'bytes' in chunk_obj:\n",
    "            # Decode the bytes and append to the answer\n",
    "            chunk_data = chunk_obj['bytes'].decode('utf-8')\n",
    "            answer += chunk_data\n",
    "\n",
    "# Now 'answer' contains the full response from the agent\n",
    "print(\"Agent Answer: {}\".format(answer))\n",
    "print(\"====================\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Prepare agent and create alias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rag_agent_alias_id, rag_agent_alias_arn = agents.create_agent_alias(\n",
    "    rag_agent[0], 'v1'\n",
    ")\n",
    "\n",
    "%store rag_agent_alias_arn\n",
    "rag_agent_alias_id, rag_agent_alias_arn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create question and answer file\n",
    "Note: The 'question_and_answers.json' file compiles a list of questions and answers from the dataset, you can try asking the RAG agent some of these questions!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create input json data file for evaluation framework and place so it can be run by evaluation framework by user\n",
    "\n",
    "ds_qa = load_dataset(\"rag-datasets/rag-mini-wikipedia\", \"question-answer\")\n",
    "\n",
    "qa_data = []\n",
    "\n",
    "# Iterate through all elements in dataset\n",
    "for index, data in enumerate(ds_qa['test']):\n",
    "    # Append qa to list\n",
    "    qa_data.append(data)\n",
    "\n",
    "# Save to JSON file\n",
    "with open('question_and_answers.json', 'w', encoding='utf-8') as f:\n",
    "    json.dump(qa_data, f, indent=4, ensure_ascii=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy SageMaker JumpStart foundation model with Lambda integration for Bedrock

Parameters:
  ModelData:
    Description: S3 location for SageMaker JumpStart model
    Type: String
    Default: s3://jumpstart-cache-prod-us-east-1/huggingface-infer/prepack/v1.0.3/infer-prepack-huggingface-text2text-flan-t5-xl.tar.gz

  ImageURI:
    Description: Container URI for inference endpoint
    Type: String
    Default: 763104351884.dkr.ecr.us-east-1.amazonaws.com/huggingface-pytorch-inference:1.10.2-transformers4.17.0-gpu-py38-cu113-ubuntu20.04

  InstanceType:
    Description: Instance type for SageMaker endpoint
    Type: String
    Default: ml.p3.2xlarge

  InstanceCount:
    Description: Number of instances for SageMaker endpoint
    Type: String
    Default: '1'

  EndpointName:
    Description: Name for the SageMaker endpoint
    Type: String
    Default: jumpstart-foundation-model

  LambdaFunctionName:
    Description: Name for the Lambda function
    Type: String
    Default: foundation-model-invoke

Resources:
  # IAM Role for SageMaker
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  # SageMaker Model
  SageMakerModel:
    Type: AWS::SageMaker::Model
    Properties:
      ModelName: !Sub ${AWS::StackName}-model
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn
      PrimaryContainer:
        Image: !Ref ImageURI
        ModelDataUrl: !Ref ModelData
        Environment:
          SAGEMAKER_CONTAINER_LOG_LEVEL: '20'
          SAGEMAKER_PROGRAM: inference.py
          SAGEMAKER_REGION: !Ref AWS::Region
          MMS_DEFAULT_RESPONSE_TIMEOUT: '500'

  # SageMaker Endpoint Configuration
  SageMakerEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      EndpointConfigName: !Sub ${AWS::StackName}-endpoint-config
      ProductionVariants:
        - VariantName: AllTraffic
          ModelName: !GetAtt SageMakerModel.ModelName
          InitialInstanceCount: !Ref InstanceCount
          InstanceType: !Ref InstanceType

  # SageMaker Endpoint
  SageMakerEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: !Ref EndpointName
      EndpointConfigName: !GetAtt SageMakerEndpointConfig.EndpointConfigName

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunctionName}
      RetentionInDays: 30

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: InvokeSageMakerEndpoint
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
                Resource: !Sub arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/${EndpointName}

  # Lambda Function
  FoundationModelLambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaLogGroup
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
            import json
            import boto3
            import os
            
            runtime = boto3.client('runtime.sagemaker')
            endpoint_name = os.environ['ENDPOINT_NAME']
            
            def lambda_handler(event, context):
                try:
                    # Get the input text from the event
                    print(event)
                    agent = event['agent']
                    actionGroup = event['actionGroup']
                    function = event['function']
                    parameters = event.get('parameters', [])
                    responseBody =  {
                        "TEXT": {
                            "body": "Error, no function was called"
                        }
                    }
            
            
                    
                    if function == 'invoke_model_inference':
                        for param in parameters:
                            if param["name"] == "input_text":
                                input_text = param["value"]
                    
                                # Prepare the payload for SageMaker endpoint
                                payload = {
                                    "text_inputs": input_text
                                }
                                print(payload)
                                
                                # Invoke the SageMaker endpoint
                                response = runtime.invoke_endpoint(
                                    EndpointName=endpoint_name,
                                    ContentType='application/json',
                                    Body=json.dumps(payload)
                                )
                                print("result:")
                                print(response)
                                # Parse the response
                                result = json.loads(response['Body'].read().decode())
                                print(result)
                                action_response = {
                                    'actionGroup': actionGroup,
                                    'function': function,
                                    'functionResponse': {
                                        'responseBody': {
                                                    "TEXT": {
                                                    'statusCode': 200,
                                                    'body': json.dumps(result)
                                                    }
                                            }
                                    }
            
                                }
            
                                function_response = {'response': action_response, 'messageVersion': event['messageVersion']}
                                print("Response: {}".format(function_response))
                                return function_response
                    
                except Exception as e:
                    return {
                        
                        'statusCode': 500,
                        'body': json.dumps({'error': str(e)})
                    }

      Handler: index.lambda_handler
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENDPOINT_NAME: !Ref EndpointName

Outputs:
  EndpointName:
    Description: Name of the SageMaker endpoint
    Value: !Ref EndpointName
  
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt FoundationModelLambda.Arn
  
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref LambdaFunctionName

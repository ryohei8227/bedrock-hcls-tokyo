{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sample Text2Cypher Agent Walkthrough\n",
    "\n",
    "This notebook will walk users through setting up a Text2Cypher Agent that leverages the [Reactome Pathway Database](https://reactome.org/dev/graph-database)\n",
    "\n",
    "This agent utilizes Amazon Neptune to store this graph data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pre-requisites\n",
    "\n",
    "1. Go through the notebook environment setup in the agents_catalog/0-Notebook-environment/ folder\n",
    "\n",
    "2. Deploy text2cypher_infra.yaml to your AWS account to instantiate an Amazon Neptune instance, ensure that the SageMaker notebook instance you are running this notebook in is in the same VPC as the deployed Neptune database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Ensure the latest version of boto3 is shown below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "boto3==1.37.17\n"
     ]
    }
   ],
   "source": [
    "!pip freeze | grep boto3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# boto3 session\n",
    "sts_client = boto3.client('sts')\n",
    "session = boto3.session.Session()\n",
    "\n",
    "# Account info\n",
    "account_id = sts_client.get_caller_identity()[\"Account\"]\n",
    "region = session.region_name\n",
    "\n",
    "# FM used for all agents, choose cross-region if needed\n",
    "agent_foundation_model = [\"anthropic.claude-3-5-sonnet-20241022-v2:0\"]\n",
    "# agent_foundation_model = [\"us.anthropic.claude-3-5-sonnet-20241022-v2:0\"]\n",
    "\n",
    "# Supervisor agent FM, choose cross-region if needed\n",
    "supervisor_agent_foundation_model = [\"anthropic.claude-3-5-sonnet-20241022-v2:0\"]\n",
    "# supervisor_agent_foundation_model = [\"us.anthropic.claude-3-5-sonnet-20241022-v2:0\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ap-northeast-1 \n"
     ]
    }
   ],
   "source": [
    "print(region)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Retrieve imports environment variable and bring libraries into notebook\n",
    "#### Load in environment variables to notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages/pydantic/_internal/_fields.py:192: UserWarning: Field name \"json\" in \"MonitoringDatasetFormat\" shadows an attribute in parent \"Base\"\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[03/21/25 14:25:47] </span><span style=\"color: #0069ff; text-decoration-color: #0069ff; font-weight: bold\">INFO    </span> Found credentials from IAM Role:                                   <a href=\"file:///home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages/botocore/credentials.py\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">credentials.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file:///home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages/botocore/credentials.py#1132\" target=\"_blank\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1132</span></a>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">                    </span>         BaseNotebookInstanceEc2InstanceRole                                <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[03/21/25 14:25:47]\u001b[0m\u001b[2;36m \u001b[0m\u001b[1;38;2;0;105;255mINFO    \u001b[0m Found credentials from IAM Role:                                   \u001b]8;id=820044;file:///home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages/botocore/credentials.py\u001b\\\u001b[2mcredentials.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=883121;file:///home/ec2-user/anaconda3/envs/python3/lib/python3.10/site-packages/botocore/credentials.py#1132\u001b\\\u001b[2m1132\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[2;36m                    \u001b[0m         BaseNotebookInstanceEc2InstanceRole                                \u001b[2m                   \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sagemaker.config INFO - Not applying SDK defaults from location: /etc/xdg/sagemaker/config.yaml\n",
      "sagemaker.config INFO - Not applying SDK defaults from location: /home/ec2-user/.config/sagemaker/config.yaml\n",
      "Successfully imported necessary libraries into notebook\n"
     ]
    }
   ],
   "source": [
    "%run $IMPORTS_PATH"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract information from CloudFormation Stack Outputs\n",
    "### Replace the \"stack_name\" variable with the name you put when deploying 'text2cypher_infra.yaml'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "stack_name = \"neptune\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8182\n",
      "reactome-db-048051882663-ap-northeast-1 .cluster-c9kuqm8skznm.ap-northeast-1 .neptune.amazonaws.com\n",
      "arn:aws:iam::048051882663:role/neptune-NeptuneLoadFromS3Role-BNr2BLxRhaTa\n",
      "reactome-data-048051882663-ap-northeast-1 \n",
      "vpc-0b8fef50a2c256b19\n",
      "sg-0c78114358c16a773\n",
      "reactome-db-048051882663-ap-northeast-1 .cluster-ro-c9kuqm8skznm.ap-northeast-1 .neptune.amazonaws.com\n"
     ]
    }
   ],
   "source": [
    "import boto3\n",
    "\n",
    "def get_stack_outputs(stack_name, region='ap-northeast-1 '):\n",
    "    cloudformation = boto3.client('cloudformation', region_name=region)\n",
    "    \n",
    "    try:\n",
    "        # Get stack outputs\n",
    "        response = cloudformation.describe_stacks(StackName=stack_name)\n",
    "        outputs = response['Stacks'][0]['Outputs']\n",
    "        \n",
    "        # Convert outputs to dictionary\n",
    "        output_dict = {output['OutputKey']: output['OutputValue'] for output in outputs}\n",
    "        \n",
    "        return output_dict\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Error getting stack outputs: {str(e)}\")\n",
    "        return None\n",
    "\n",
    "# Usage\n",
    "outputs = get_stack_outputs(stack_name)\n",
    "\n",
    "# Extract all necessary outputs from CloudFormation stack\n",
    "if outputs:\n",
    "    SERVER = outputs['DBClusterEndpoint']\n",
    "    PORT = 8182\n",
    "    ROLE_ARN = outputs['NeptuneLoadFromS3IAMRoleArn']\n",
    "    BUCKET_NAME = outputs['AmazonS3BucketName']\n",
    "    NEPTUNE_VPC = outputs['VPC']\n",
    "    NEPTUNE_SG = outputs['NeptuneSG']\n",
    "    NEPTUNE_READER_ENDPOINT = outputs['DBClusterReadEndpoint']\n",
    "    \n",
    "    print(PORT)\n",
    "    print(SERVER)\n",
    "    print(ROLE_ARN)\n",
    "    print(BUCKET_NAME)\n",
    "    print(NEPTUNE_VPC)\n",
    "    print(NEPTUNE_SG)\n",
    "    print(NEPTUNE_READER_ENDPOINT)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3\n",
    "\n",
    "# Initialize S3 client\n",
    "s3 = boto3.client('s3')\n",
    "\n",
    "# Define bucket and file key directly\n",
    "reactome_data_bucket_name = 'aws-hcls-ml'\n",
    "file_name = 'reactome/reactome_data.zip'\n",
    "\n",
    "try:\n",
    "    # Download file\n",
    "    s3.download_file(reactome_data_bucket_name, file_name, 'reactome_data.zip')\n",
    "    print('Reactome data downloaded successfully')\n",
    "except Exception as e:\n",
    "    print(f'Error downloading file: {e}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract Reactome data from provided .zip file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unzipped Reactome Graph data\n",
      "Uploading vertices.csv to S3...\n",
      "Successfully uploaded vertices.csv\n",
      "Uploading edges.csv to S3...\n",
      "Successfully uploaded edges.csv\n",
      "Upload to bucket reactome-data-048051882663-ap-northeast-1  complete!\n"
     ]
    }
   ],
   "source": [
    "import zipfile\n",
    "\n",
    "# Unzip data \n",
    "with zipfile.ZipFile('reactome_data.zip', 'r') as zip_ref:\n",
    "    zip_ref.extractall()\n",
    "    \n",
    "print(\"Unzipped Reactome Graph data\")\n",
    "\n",
    "# Upload to S3 bucket for later ingestion\n",
    "s3_client = boto3.client('s3')\n",
    "\n",
    "# List all files in the data folder\n",
    "files = os.listdir('reactome_data')\n",
    "\n",
    "# Upload each file to S3 bucket\n",
    "for file in files:\n",
    "    local_file_path = os.path.join('reactome_data', file)\n",
    "    \n",
    "    try:\n",
    "        print(f\"Uploading {file} to S3...\")\n",
    "        s3_client.upload_file(local_file_path, BUCKET_NAME, file)\n",
    "        print(f\"Successfully uploaded {file}\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error uploading {file}: {str(e)}\")\n",
    "\n",
    "print(f\"Upload to bucket {BUCKET_NAME} complete!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Reactome data into Amazon Neptune\n",
    "Note: This can take a very long time! Do not proceed in notebook until this data load is complete. Check the neptune_load.log for detailed information on how the data load is progressing!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'status': '200 OK', 'payload': {'loadId': '04c6949f-b926-42ef-9e58-aa49b76e1da1'}}\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_IN_PROGRESS\n",
      "Current status: LOAD_COMPLETED\n",
      "Final load job status: LOAD_COMPLETED\n",
      "Neptune load job completed\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import json\n",
    "import datetime\n",
    "import time\n",
    "import requests\n",
    "\n",
    "ENDPOINT = f\"https://{SERVER}:{PORT}/loader\"\n",
    "\n",
    "headers = {'Content-type': 'application/json'}\n",
    "data = {\n",
    "    \"source\": f\"s3://{BUCKET_NAME}/\",\n",
    "    \"format\": \"csv\",\n",
    "    \"iamRoleArn\": ROLE_ARN,\n",
    "    \"region\": region,\n",
    "    \"failOnError\": \"TRUE\",\n",
    "    \"parallelism\": \"HIGH\",\n",
    "    \"updateSingleCardinalityProperties\": \"FALSE\",\n",
    "    \"queueRequest\": \"TRUE\",\n",
    "    \"mode\": \"NEW\"\n",
    "}\n",
    "\n",
    "# Function to write logs to a file\n",
    "def write_to_log(message, filename=\"neptune_load.log\"):\n",
    "    timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
    "    try:\n",
    "        if isinstance(message, dict):\n",
    "            message = json.dumps(message, indent=2)\n",
    "        \n",
    "        # Create directory if it doesn't exist\n",
    "        log_dir = os.path.dirname(filename)\n",
    "        if log_dir and not os.path.exists(log_dir):\n",
    "            os.makedirs(log_dir)\n",
    "            \n",
    "        with open(filename, \"a\", encoding='utf-8') as log_file:\n",
    "            log_file.write(f\"[{timestamp}] {message}\\n\")\n",
    "            log_file.flush()\n",
    "            os.fsync(log_file.fileno())  # Ensure write to disk\n",
    "    except Exception as e:\n",
    "        print(f\"Error writing to log: {str(e)}\")\n",
    "\n",
    "# Start of the script\n",
    "write_to_log(\"Starting Neptune load job\")\n",
    "\n",
    "resp = requests.post(ENDPOINT, data=json.dumps(data), headers=headers)\n",
    "\n",
    "print(resp.json())\n",
    "write_to_log(f\"Initial response: {resp.json()}\")\n",
    "\n",
    "# Extract the load ID from the response\n",
    "load_id = resp.json().get('payload', {}).get('loadId')\n",
    "\n",
    "if load_id:\n",
    "    write_to_log(f\"Load ID: {load_id}\")\n",
    "    # Check the status of the load job\n",
    "    status_endpoint = f\"https://{SERVER}:{PORT}/loader/{load_id}\"\n",
    "    \n",
    "    # Poll the status until the job is complete\n",
    "    while True:\n",
    "        status_resp = requests.get(status_endpoint, headers=headers)\n",
    "        status = status_resp.json().get('payload', {}).get('overallStatus', {}).get('status')\n",
    "        \n",
    "        print(f\"Current status: {status}\")\n",
    "        write_to_log(f\"Status check - Current status: {status}\")\n",
    "\n",
    "        # Get detailed information about the load job\n",
    "        details_endpoint = f\"https://{SERVER}:{PORT}/loader/{load_id}?details=true\"\n",
    "        details_resp = requests.get(details_endpoint, headers=headers)\n",
    "        details = details_resp.json()\n",
    "        \n",
    "        write_to_log(f\"Detailed status: {details}\")\n",
    "\n",
    "        if status == 'LOAD_CANCELLED_DUE_TO_ERRORS':\n",
    "            errors_endpoint = f\"https://{SERVER}:{PORT}/loader/{load_id}?details=true&errors=true\"\n",
    "            errors_resp = requests.get(errors_endpoint, headers=headers)\n",
    "            print(json.dumps(errors_resp.json(), indent=2))\n",
    "            write_to_log(f\"Load job errors: {json.dumps(errors_resp.json())}\")\n",
    "        \n",
    "        if status in ['LOAD_COMPLETED', 'LOAD_FAILED']:\n",
    "            print(f\"Final load job status: {status}\")\n",
    "            write_to_log(f\"Final load job status: {status}\")\n",
    "            break\n",
    "   \n",
    "        time.sleep(30)  # Wait for 30 seconds before checking again\n",
    "   \n",
    "else:\n",
    "    print(\"Failed to get load ID. Check the initial response.\")\n",
    "    write_to_log(\"Failed to get load ID. Check the initial response.\")\n",
    "\n",
    "# End of the script\n",
    "print(\"Neptune load job completed\")\n",
    "write_to_log(\"Neptune load job completed\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Text2Cypher Agent\n",
    "In this section we create the Text2Cypher agent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fill out your agent configuration below "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "agent_name = 'biological-pathways-agent'\n",
    "agent_description = 'This agent interacts with Reactome data by converting text to openCypher queries for Amazon Neptune'\n",
    "agent_instruction = \"\"\"\n",
    "You are a medical research assistant AI specialized in generating and running openCypher queries for a Reactome graph database\n",
    "containing human biological pathways and reactions. Your primary task is to interpret user queries, generate appropriate \n",
    "openCypher queries, and run the openCypher queries against the Neptune database and provide relevant biological insights \n",
    "based on the data. Use only the appropriate tools as required by the specific question. Follow these instructions carefully: \n",
    "1. Before generating any openCypher query, use the /getschema tool to familiarize yourself with the property and types of \n",
    "nodes and the edges. This will ensure your queries are correctly formatted and target the appropriate nodes and edges in the \n",
    "graph. 2. When generating an openCypher query: a. Write the query as a single line, removing all newline (\"\") characters. \n",
    "b. Property names should remain consistent, do not modify the property names in the generated openCypher query. \n",
    "3. proceed to execute the query using the /queryneptune tool after generating the openCypher query \n",
    "4. Always provide a response to the user. If you can't get results tell the user as such: \n",
    "a. Start with a brief summary of your understanding of the user's query. \n",
    "b. Explain the steps you're taking to address the query. \n",
    "c. Ask for clarifications from the user if required. \n",
    "d. If the query fails to execute or doesn't retrieve results, ask the user for the stable identifier of the protein/pathway \n",
    "related to the question. \n",
    "Here are some examples of question and the corresponding cypher query: \n",
    "Question: a. Which molecules participate in Interleukin-4 and 13 signaling (R-HSA-6785807)? \n",
    "OpenCypher query: MATCH (p:Pathway{stId:\"R-HSA-6785807\"})- [:hasEvent*]->(rle:ReactionLikeEvent), \n",
    "(rle)-[: input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy| \n",
    "regulator|hasComponent/hasMember|hasCandidate|repeatedUnit*] ->(pe:PhysicalEntity), (pe)-[:referenceEntity]-›\n",
    "(re:ReferenceEntity)-[:referenceDatabase]->(rd:ReferenceDatabase) RETURN DISTINCT re. identifier AS Identifier, \n",
    "rd.displayName AS Database Question: b. In which pathways does CCR5 (UniProt:P51681) participate? \n",
    "OpenCypher query: MATCH (p:Pathway)-[:hasEvent*] ->(rle:ReactionLikeEvent), \n",
    "(rle)-[:input|output|catalystActivity|entityFunctionalStatus|physicalEntity|regulatedBy| \n",
    "regulator|hasComponent|hasMember|hasCandidate|repeatedUnit*]->(pe:PhysicalEntity), \n",
    "(pe)-[: referenceEntity]->(re:ReferenceEntity(identifier:\"P51681\"}), (re) -[:referenceDatabase]->\n",
    "(rd:ReferenceDatabase{displayName:\"UniProt\"}) RETURN DISTINCT p.stId AS Identifier, p.displayName AS Pathway\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Instantiate your agent with the desired configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('XNKNELHZ6U',\n",
       " 'TSTALIASID',\n",
       " 'arn:aws:bedrock:ap-northeast-1 :048051882663:agent-alias/XNKNELHZ6U/TSTALIASID')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agents = AgentsForAmazonBedrock()\n",
    "\n",
    "text2cypher_agent = agents.create_agent(\n",
    "    agent_name,\n",
    "    agent_description,\n",
    "    agent_instruction,\n",
    "    agent_foundation_model,\n",
    "    code_interpretation=False,\n",
    "    verbose=False\n",
    ")\n",
    "\n",
    "text2cypher_agent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Extract useful agent information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('XNKNELHZ6U', 'arn:aws:bedrock:ap-northeast-1 :048051882663:agent/XNKNELHZ6U')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text2cypher_agent_id = text2cypher_agent[0]\n",
    "text2cypher_agent_arn = f\"arn:aws:bedrock:{region}:{account_id}:agent/{text2cypher_agent_id}\"\n",
    "\n",
    "text2cypher_agent_id, text2cypher_agent_arn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Define the API Schema needed for an ActionGroup\n",
    "##### A simple sample schema is provided below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "api_schema_string = '''\n",
    "  {\n",
    "  \"openapi\": \"3.0.1\",\n",
    "  \"info\": {\n",
    "    \"title\": \"Database schema look up and query APIs\",\n",
    "    \"version\": \"1.0.0\",\n",
    "    \"description\": \"APIs for looking up graph database schemas and making queries to graph database.\"\n",
    "  },\n",
    "  \"paths\": {\n",
    "    \"/getschema\": {\n",
    "      \"get\": {\n",
    "        \"summary\": \"Get a list of property and type of nodes and edges in the Neptune database\",\n",
    "        \"description\": \"Get the list of property and type of nodes and edges in the Neptune database. Return all the property information in graph database.\",\n",
    "        \"operationId\": \"getschema\",\n",
    "        \"responses\": {\n",
    "          \"200\": {\n",
    "            \"description\": \"Gets the list of property and type of nodes and edges in the Neptune database\",\n",
    "            \"content\": {\n",
    "              \"application/json\": {\n",
    "                \"schema\": {\n",
    "                  \"type\": \"string\",\n",
    "                  \"description\": \"A string containing graph schema information\"\n",
    "                }\n",
    "              }\n",
    "            }\n",
    "          }\n",
    "        }\n",
    "      }\n",
    "    },\n",
    "    \"/queryneptune\": {\n",
    "      \"get\": {\n",
    "        \"summary\": \"API to send query to the Neptune database\",\n",
    "        \"description\": \"Send a query to the Neptune graph database to retrieve information pertaining to the users question. The API takes in only one openCypher query at a time, sends the openCypher statement and returns the query results from the graph database. This API should be called for each openCypher query to a Neptune database.\",\n",
    "        \"operationId\": \"queryneptune\",\n",
    "        \"parameters\": [\n",
    "          {\n",
    "            \"name\": \"query\",\n",
    "            \"in\": \"query\",\n",
    "            \"required\": true,\n",
    "            \"schema\": {\n",
    "              \"type\": \"string\"\n",
    "            },\n",
    "            \"description\": \"openCypher statement to query Neptune database.\"\n",
    "          }\n",
    "        ],\n",
    "        \"responses\": {\n",
    "          \"200\": {\n",
    "            \"description\": \"Query sent successfully\",\n",
    "            \"content\": {\n",
    "              \"application/json\": {\n",
    "                \"schema\": {\n",
    "                  \"type\": \"object\",\n",
    "                  \"properties\": {\n",
    "                    \"responseBody\": {\n",
    "                      \"type\": \"string\",\n",
    "                      \"description\": \"The query response from the Neptune database.\"\n",
    "                    }\n",
    "                  }\n",
    "                }\n",
    "              }\n",
    "            }\n",
    "          },\n",
    "          \"400\": {\n",
    "            \"description\": \"Bad request. One or more required fields are missing or invalid.\"\n",
    "          }\n",
    "        }\n",
    "      }\n",
    "    }\n",
    "  }\n",
    "}\n",
    "'''\n",
    "\n",
    "api_schema = {\"payload\": api_schema_string}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create Lambda function for use by agent ActionGroup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Attach Lambda function and create ActionGroup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'arn:aws:lambda:ap-northeast-1 :048051882663:function:text2cypher'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define Lambda func. details\n",
    "text2cypher_lambda_function_name = \"text2cypher\"\n",
    "text2cypher_lambda_function_arn = f\"arn:aws:lambda:{region}:{account_id}:function:{text2cypher_lambda_function_name}\"\n",
    "text2cypher_lambda_function_arn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating action group: Text2CypherActionGroup...\n",
      "Lambda ARN: arn:aws:lambda:ap-northeast-1 :048051882663:function:text2cypher\n",
      "Agent functions: None\n"
     ]
    }
   ],
   "source": [
    "agents.add_action_group_with_lambda(\n",
    "    agent_name=agent_name,\n",
    "    lambda_function_name=text2cypher_lambda_function_name,\n",
    "    source_code_file=\"text2cypher_lambda.py\",\n",
    "    agent_action_group_name=\"Text2CypherActionGroup\",\n",
    "    agent_action_group_description=\"This tool generates Cypher queries and return a response from an Amazon Neptune database with Reactome data to a user's natural language query\",\n",
    "    api_schema=api_schema,\n",
    "    verbose=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"Version\": \"2012-10-17\",\n",
      "    \"Statement\": [\n",
      "        {\n",
      "            \"Effect\": \"Allow\",\n",
      "            \"Action\": \"logs:CreateLogGroup\",\n",
      "            \"Resource\": \"arn:aws:logs:ap-northeast-1 :048051882663:*\"\n",
      "        },\n",
      "        {\n",
      "            \"Effect\": \"Allow\",\n",
      "            \"Action\": [\n",
      "                \"logs:CreateLogStream\",\n",
      "                \"logs:PutLogEvents\"\n",
      "            ],\n",
      "            \"Resource\": [\n",
      "                \"arn:aws:logs:ap-northeast-1 :048051882663:log-group:/aws/lambda/*:*\"\n",
      "            ]\n",
      "        },\n",
      "        {\n",
      "            \"Sid\": \"DBAccess\",\n",
      "            \"Effect\": \"Allow\",\n",
      "            \"Action\": \"neptune-db:*\",\n",
      "            \"Resource\": [\n",
      "                \"arn:aws:neptune-db:ap-northeast-1 :048051882663:*/*\"\n",
      "            ]\n",
      "        },\n",
      "        {\n",
      "            \"Effect\": \"Allow\",\n",
      "            \"Action\": [\n",
      "                \"ec2:CreateNetworkInterface\",\n",
      "                \"ec2:DescribeNetworkInterfaces\",\n",
      "                \"ec2:DeleteNetworkInterface\",\n",
      "                \"ec2:AssignPrivateIpAddresses\",\n",
      "                \"ec2:UnassignPrivateIpAddresses\",\n",
      "                \"bedrock:*\"\n",
      "            ],\n",
      "            \"Resource\": \"*\"\n",
      "        },\n",
      "        {\n",
      "            \"Action\": [\n",
      "                \"bedrock:InvokeModel\"\n",
      "            ],\n",
      "            \"Resource\": \"arn:aws:bedrock:ap-northeast-1 ::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0\",\n",
      "            \"Effect\": \"Allow\",\n",
      "            \"Sid\": \"BedrockAccess\"\n",
      "        },\n",
      "        {\n",
      "            \"Sid\": \"AllowS3Put\",\n",
      "            \"Effect\": \"Allow\",\n",
      "            \"Action\": [\n",
      "                \"s3:PutObject\",\n",
      "                \"s3:GetObject\"\n",
      "            ],\n",
      "            \"Resource\": [\n",
      "                \"arn:aws:s3:::*/*\"\n",
      "            ]\n",
      "        }\n",
      "    ]\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "lambda_permissions = '''{{\n",
    "    \"Version\": \"2012-10-17\",\n",
    "    \"Statement\": [\n",
    "        {{\n",
    "            \"Effect\": \"Allow\",\n",
    "            \"Action\": \"logs:CreateLogGroup\",\n",
    "            \"Resource\": \"arn:aws:logs:ap-northeast-1 :{account_id}:*\"\n",
    "        }},\n",
    "        {{\n",
    "            \"Effect\": \"Allow\",\n",
    "            \"Action\": [\n",
    "                \"logs:CreateLogStream\",\n",
    "                \"logs:PutLogEvents\"\n",
    "            ],\n",
    "            \"Resource\": [\n",
    "                \"arn:aws:logs:ap-northeast-1 :{account_id}:log-group:/aws/lambda/*:*\"\n",
    "            ]\n",
    "        }},\n",
    "        {{\n",
    "            \"Sid\": \"DBAccess\",\n",
    "            \"Effect\": \"Allow\",\n",
    "            \"Action\": \"neptune-db:*\",\n",
    "            \"Resource\": [\n",
    "                \"arn:aws:neptune-db:ap-northeast-1 :{account_id}:*/*\"\n",
    "            ]\n",
    "        }},\n",
    "        {{\n",
    "            \"Effect\": \"Allow\",\n",
    "            \"Action\": [\n",
    "                \"ec2:CreateNetworkInterface\",\n",
    "                \"ec2:DescribeNetworkInterfaces\",\n",
    "                \"ec2:DeleteNetworkInterface\",\n",
    "                \"ec2:AssignPrivateIpAddresses\",\n",
    "                \"ec2:UnassignPrivateIpAddresses\",\n",
    "                \"bedrock:*\"\n",
    "            ],\n",
    "            \"Resource\": \"*\"\n",
    "        }},\n",
    "        {{\n",
    "            \"Action\": [\n",
    "                \"bedrock:InvokeModel\"\n",
    "            ],\n",
    "            \"Resource\": \"arn:aws:bedrock:ap-northeast-1 ::foundation-model/{agent_foundation_model[0]}\",\n",
    "            \"Effect\": \"Allow\",\n",
    "            \"Sid\": \"BedrockAccess\"\n",
    "        }},\n",
    "        {{\n",
    "            \"Sid\": \"AllowS3Put\",\n",
    "            \"Effect\": \"Allow\",\n",
    "            \"Action\": [\n",
    "                \"s3:PutObject\",\n",
    "                \"s3:GetObject\"\n",
    "            ],\n",
    "            \"Resource\": [\n",
    "                \"arn:aws:s3:::*/*\"\n",
    "            ]\n",
    "        }}\n",
    "    ]\n",
    "}}'''\n",
    "\n",
    "# Replace the variables in the policy\n",
    "filled_policy = lambda_permissions.format(\n",
    "    account_id=account_id,\n",
    "    agent_foundation_model=agent_foundation_model\n",
    ")\n",
    "\n",
    "# Parse the string to ensure it's valid JSON and format it nicely\n",
    "formatted_policy = json.dumps(json.loads(filled_policy), indent=4)\n",
    "\n",
    "# Print the formatted policy\n",
    "print(formatted_policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Attach policy above as an inline policy to the Lambda function's execution role"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully attached policy to role biological-pathways-agent-lambda-role-ap-northeast-1 -048051882663\n"
     ]
    }
   ],
   "source": [
    "# Initialize AWS clients\n",
    "iam = boto3.client('iam')\n",
    "lambda_client = boto3.client('lambda')\n",
    "\n",
    "try:\n",
    "    # Get the Lambda function configuration to find its role\n",
    "    lambda_config = lambda_client.get_function(FunctionName='text2cypher')\n",
    "    role_arn = lambda_config['Configuration']['Role']\n",
    "    role_name = role_arn.split('/')[-1]\n",
    "\n",
    "    # Your policy document (assuming filled_policy contains the policy JSON)\n",
    "    formatted_policy = json.dumps(json.loads(filled_policy), indent=4)\n",
    "\n",
    "    # Create the policy\n",
    "    policy_name = 'Text2CypherPolicy'\n",
    "    policy_response = iam.create_policy(\n",
    "        PolicyName=policy_name,\n",
    "        PolicyDocument=formatted_policy,\n",
    "        Description='Policy for text2cypher Lambda function'\n",
    "    )\n",
    "\n",
    "    # Attach the policy to the role\n",
    "    iam.attach_role_policy(\n",
    "        RoleName=role_name,\n",
    "        PolicyArn=policy_response['Policy']['Arn']\n",
    "    )\n",
    "\n",
    "    print(f\"Successfully attached policy to role {role_name}\")\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Error attaching policy: {str(e)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Add the Lambda layer to the function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Layer added successfully to function text2cypher\n"
     ]
    }
   ],
   "source": [
    "# Publish the Lambda layer\n",
    "with open('lambda_layer.zip', 'rb') as zip_file:\n",
    "    zip_binary = zip_file.read()\n",
    "\n",
    "layer_response = lambda_client.publish_layer_version(\n",
    "    LayerName='Text2CypherLayer',\n",
    "    Description='Custom layer for text2cypher function',\n",
    "    Content={\n",
    "        'ZipFile': zip_binary\n",
    "    }\n",
    ")\n",
    "\n",
    "layer_version_arn = layer_response['LayerVersionArn']\n",
    "\n",
    "# Update the Lambda function to use the layer\n",
    "lambda_client.update_function_configuration(\n",
    "    FunctionName='text2cypher',\n",
    "    Layers=[layer_version_arn]\n",
    ")\n",
    "\n",
    "print(f\"Layer added successfully to function {text2cypher_lambda_function_name}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Increase Lambda function timeout to 15 minutes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully increased lambda function timeout\n"
     ]
    }
   ],
   "source": [
    "# Update the Lambda function to have 15 minute timeout\n",
    "lambda_client.update_function_configuration(\n",
    "    FunctionName='text2cypher',\n",
    "    Timeout=900  # 15 minutes = 900 seconds\n",
    ")\n",
    "\n",
    "print(\"Successfully increased lambda function timeout\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Add Lambda function environment variables and create new query results S3 bucket"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created bucket: text2cypher-agent-048051882663-626dd0\n",
      "Environment variables added successfully to text2cypher\n"
     ]
    }
   ],
   "source": [
    "random_suffix = uuid.uuid4().hex[:6]\n",
    "\n",
    "# Create Neptune query results bucket\n",
    "bucket_name = f\"{'text2cypher-agent'}-{account_id}-{random_suffix}\"\n",
    "\n",
    "s3_client = boto3.client('s3')\n",
    "s3 = boto3.resource('s3')\n",
    "\n",
    "if region == 'ap-northeast-1 ':\n",
    "    # For ap-northeast-1 , don't specify LocationConstraint\n",
    "    s3_client.create_bucket(Bucket=bucket_name)\n",
    "else:\n",
    "    s3_client.create_bucket(\n",
    "        Bucket=bucket_name,\n",
    "        CreateBucketConfiguration={'LocationConstraint': region}\n",
    "    )\n",
    "\n",
    "print(f\"Created bucket: {bucket_name}\")\n",
    "\n",
    "lambda_client.update_function_configuration(\n",
    "    FunctionName=text2cypher_lambda_function_name,\n",
    "    Environment={\n",
    "        'Variables': {\n",
    "            'NEPTUNE_HOST': NEPTUNE_READER_ENDPOINT,\n",
    "            'NEPTUNE_PORT': str(PORT),\n",
    "            'BUCKET_NAME': bucket_name\n",
    "        }\n",
    "    }\n",
    ")\n",
    "print(f\"Environment variables added successfully to {text2cypher_lambda_function_name}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lambda function VPC configuration to contact Amazon Neptune"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created VPC endpoint: vpce-0b8b1ae7e38e4d701\n",
      "Created security group: sg-0fb3e328078c1d0df\n"
     ]
    }
   ],
   "source": [
    "ec2_client = boto3.client('ec2')\n",
    "\n",
    "# First get the subnets\n",
    "response = ec2_client.describe_subnets(\n",
    "    Filters=[{'Name': 'vpc-id', 'Values': [NEPTUNE_VPC]}]\n",
    ")\n",
    "\n",
    "subnets_by_az = {}\n",
    "for subnet in response['Subnets']:\n",
    "    az = subnet['AvailabilityZone']\n",
    "    if az not in subnets_by_az:\n",
    "        subnets_by_az[az] = subnet['SubnetId']\n",
    "\n",
    "subnet_ids = list(subnets_by_az.values())\n",
    "\n",
    "# Create new security group\n",
    "sg_response = ec2_client.create_security_group(\n",
    "    GroupName='bedrock-vpc-endpoint-sg',\n",
    "    Description='Security group for Bedrock VPC endpoint',\n",
    "    VpcId=NEPTUNE_VPC\n",
    ")\n",
    "security_group_id = sg_response['GroupId']\n",
    "\n",
    "# Add inbound rule to allow all traffic\n",
    "ec2_client.authorize_security_group_ingress(\n",
    "    GroupId=security_group_id,\n",
    "    IpPermissions=[\n",
    "        {\n",
    "            'IpProtocol': '-1',  # -1 means all protocols\n",
    "            'FromPort': -1,      # -1 means all ports\n",
    "            'ToPort': -1,\n",
    "            'UserIdGroupPairs': [{'GroupId': NEPTUNE_SG}]  # Reference the source security group\n",
    "        }\n",
    "    ]\n",
    ")\n",
    "\n",
    "# Create VPC endpoint with new security group\n",
    "response = ec2_client.create_vpc_endpoint(\n",
    "    VpcEndpointType='Interface',\n",
    "    VpcId=NEPTUNE_VPC,\n",
    "    ServiceName=f\"com.amazonaws.{region}.bedrock-runtime\",\n",
    "    SubnetIds=subnet_ids,\n",
    "    SecurityGroupIds=[security_group_id],\n",
    "    PrivateDnsEnabled=True\n",
    ")\n",
    "\n",
    "print(f\"Created VPC endpoint: {response['VpcEndpoint']['VpcEndpointId']}\")\n",
    "print(f\"Created security group: {security_group_id}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VPC configuration for Lambda function text2cypher updated successfully\n"
     ]
    }
   ],
   "source": [
    "ec2 = boto3.client('ec2')\n",
    "\n",
    "# Update Lambda VPC configuration\n",
    "lambda_client.update_function_configuration(\n",
    "    FunctionName=text2cypher_lambda_function_name,\n",
    "    VpcConfig={\n",
    "        'SubnetIds': subnet_ids,\n",
    "        'SecurityGroupIds': [NEPTUNE_SG]\n",
    "    }\n",
    ")\n",
    "print(f\"VPC configuration for Lambda function {text2cypher_lambda_function_name} updated successfully\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Add resource based policy to Lambda function to allow agent to invoke"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resource policy added successfully.\n",
      "Response: {'ResponseMetadata': {'RequestId': '8a000071-bb96-49f8-afa7-229d81c99bf9', 'HTTPStatusCode': 201, 'HTTPHeaders': {'date': 'Fri, 21 Mar 2025 14:56:03 GMT', 'content-type': 'application/json', 'content-length': '353', 'connection': 'keep-alive', 'x-amzn-requestid': '8a000071-bb96-49f8-afa7-229d81c99bf9'}, 'RetryAttempts': 0}, 'Statement': '{\"Sid\":\"AllowText2CypherAgentAccess\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"bedrock.amazonaws.com\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:ap-northeast-1 :048051882663:function:text2cypher\",\"Condition\":{\"ArnLike\":{\"AWS:SourceArn\":\"arn:aws:bedrock:ap-northeast-1 :048051882663:agent/XNKNELHZ6U\"}}}'}\n"
     ]
    }
   ],
   "source": [
    "lambda_client = boto3.client('lambda', region)\n",
    "\n",
    "# Define the resource policy statement\n",
    "policy_statement = {\n",
    "    \"Sid\": \"AllowBedrockAgentAccess\",\n",
    "    \"Effect\": \"Allow\",\n",
    "    \"Principal\": {\n",
    "        \"Service\": \"bedrock.amazonaws.com\"\n",
    "    },\n",
    "    \"Action\": \"lambda:InvokeFunction\",\n",
    "    \"Resource\": text2cypher_lambda_function_arn,\n",
    "    \"Condition\": {\n",
    "        \"ArnEquals\": {\n",
    "            \"aws:SourceArn\": text2cypher_agent_arn\n",
    "        }\n",
    "    }\n",
    "}\n",
    "\n",
    "try:\n",
    "    # Get the current policy\n",
    "    response = lambda_client.get_policy(FunctionName=text2cypher_lambda_function_arn)\n",
    "    current_policy = json.loads(response['Policy'])\n",
    "    \n",
    "    # Add the new statement to the existing policy\n",
    "    current_policy['Statement'].append(policy_statement)\n",
    "    \n",
    "except lambda_client.exceptions.ResourceNotFoundException:\n",
    "    # If there's no existing policy, create a new one\n",
    "    current_policy = {\n",
    "        \"Version\": \"2012-10-17\",\n",
    "        \"Statement\": [policy_statement]\n",
    "    }\n",
    "\n",
    "# Convert the policy to JSON string\n",
    "updated_policy = json.dumps(current_policy)\n",
    "\n",
    "# Add or update the resource policy\n",
    "response = lambda_client.add_permission(\n",
    "    FunctionName=text2cypher_lambda_function_arn,\n",
    "    StatementId=\"AllowText2CypherAgentAccess\",\n",
    "    Action=\"lambda:InvokeFunction\",\n",
    "    Principal=\"bedrock.amazonaws.com\",\n",
    "    SourceArn=text2cypher_agent_arn\n",
    ")\n",
    "\n",
    "print(\"Resource policy added successfully.\")\n",
    "print(\"Response:\", response)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test the Text2Cypher Agent in the AWS Bedrock console\n",
    "Step 1: Navigate to the Bedrock console\n",
    "\n",
    "Step 2: Click 'Agents' and select the 'sample-text2cypher-agent'\n",
    "\n",
    "Step 3: Ask any of the questions below and get an answer!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Sample Questions\n",
    "\n",
    "1. \"Which molecules participate in Interleukin-4 and Interleukin-13 signaling?\"\n",
    "2. \"What proteins are associated with Signaling by EGFR in Cancer (R-HSA-1643713)?\"\n",
    "3. \"What other molecules participate in Signaling by EGFR in Cancer (R-HSA-1643713)?\"\n",
    "4. \"What diseases are impacted with Signaling by EGFR in Cancer (R-HSA-1643713)?\"\n",
    "5. \"What drugs impact the Signaling by EGFR in Cancer (R-HSA-1643713)?\"\n",
    "6. \"What are the immediate downstream reactions that are triggered by EGFRvIII in the 'Signaling by EGFRvIII in Cancer (R-HSA-5637812)' pathway in Homo sapiens?\"\n",
    "7. \"What proteins are associated with Signaling by EGFR in Cancer (R-HSA-1643713)?\"\n",
    "8. \"Which chemical compounds are involved in Mitochondrial translation termination (R-HSA-5419276)?\"\n",
    "9. \"What are 5 different types of proteins involved with the SARS-CoV-2 Infection (R-HSA-9694516)?\"\n",
    "10. \"Which events are in the Cap-dependent Translation Initiation pathway?\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now that agent has been tested via direct invoke, prepare it by creating an alias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stored 'text2cypher_agent_alias_arn' (str)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "('AGC98M3UQL',\n",
       " 'arn:aws:bedrock:ap-northeast-1 :048051882663:agent-alias/XNKNELHZ6U/AGC98M3UQL')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text2cypher_agent_alias_id, text2cypher_agent_alias_arn = agents.create_agent_alias(\n",
    "    text2cypher_agent[0], 'v1'\n",
    ")\n",
    "%store text2cypher_agent_alias_arn\n",
    "\n",
    "text2cypher_agent_alias_id, text2cypher_agent_alias_arn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

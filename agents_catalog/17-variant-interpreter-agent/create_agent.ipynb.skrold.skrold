{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "source": [
    "# Pre-requisites"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "!python3 -m pip install --upgrade -q botocore\n",
    "!python3 -m pip install --upgrade -q boto3\n",
    "!python3 -m pip install --upgrade -q awscli"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ['AWS_PROFILE'] = 'hcls-agents'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import boto3\n",
    "import json\n",
    "import time\n",
    "import zipfile\n",
    "from io import BytesIO\n",
    "import uuid\n",
    "import pprint\n",
    "import logging\n",
    "print(boto3.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# getting boto3 clients for required AWS services\n",
    "sts_client = boto3.client('sts')\n",
    "iam_client = boto3.client('iam')\n",
    "lambda_client = boto3.client('lambda')\n",
    "bedrock_agent_client = boto3.client('bedrock-agent')\n",
    "bedrock_agent_runtime_client = boto3.client('bedrock-agent-runtime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "session = boto3.session.Session()\n",
    "region = session.region_name\n",
    "account_id = sts_client.get_caller_identity()[\"Account\"]\n",
    "region, account_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# configuration variables\n",
    "suffix = f\"{region}-{account_id}\"\n",
    "stack_name = \"VariantInterpreter\"\n",
    "agent_name = f\"{stack_name}-Agent\"\n",
    "agent_bedrock_allow_policy_name = f\"{agent_name}-ba-{suffix}-{stack_name}\"\n",
    "agent_role_name = f'AmazonBRkExecutionRoleForAgents_{agent_name}'\n",
    "agent_foundation_model = \"anthropic.claude-3-sonnet-20240229-v1:0\"\n",
    "agent_description = \"Agent for interpreting annotated variant files and answering user Questions\"\n",
    "agent_instruction = \"You are an expert at analyzing genomics variants with VEP. You have access to a set of tools to help analyze genetic variants for patient including total variants, variants per chromosome, pathogenic variants and the VEP report file.  You have access to two action group functions: retrieve_existing_vep_report and vep_feature_extraction. Always use vep_feature_extraction to provide variants feature summary or gene level summary. Prioritize usin using featue extraction function. Please analyze this data and prepare to answer questions: 1. what is the total variant count in the patient id: “3186764”?; 2. howmany variants are present in chromosome 1?; 3. which chromosome has stronger presence of high-impact variants?; 4. what are those top 5 genes have highest number of high-impact variants?; 5. what is the impact distribution of variants in chromosome 5?; 6. howmany splice region variants are present in STAT3 gene?; 7. which gene has highest stop gained or lost variants?; 8. which gene has highest Non-coding RNA variants?; 9. which are those top 3 genes I should focus for this patient based on variant affecting proteins functional loss?; 10. Are there any SIFT scores available for these top 3 genes?\"\n",
    "agent_action_group_name = \"variant-inter-actionGroup\"\n",
    "agent_action_group_description = \"Actions for Retrieving information from variant interpretations\"\n",
    "agent_alias_name = f\"{agent_name}-alias\"\n",
    "lambda_function_role = f\"{stack_name}-LambdaExecutionRole\"\n",
    "lambda_function_name = f\"{stack_name}-{account_id}-Lambda\"\n",
    "lambda_function_arn = f\"arn:aws:lambda:{region}:{account_id}:function:{lambda_function_name}\"\n",
    "#lambda_function_arn = lambda_client.get_function(FunctionName=lambda_function_name)['Configuration']['FunctionArn']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Lambda Function "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "lambda_function_role = f\"{stack_name}-LambdaExecutionRole\"\n",
    "lambda_function_name = f\"{stack_name}-{account_id}-Lambda\"\n",
    "print(lambda_function_name)\n",
    "\n",
    "# attach the s3 full access policy to the Lambda function role\n",
    "s3_full_access_policy_arn = \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n",
    "bedrock_policy_arn = \"arn:aws:iam::aws:policy/AmazonBedrockFullAccess\"\n",
    "AWSLambdaBasicExecutionRole_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n",
    "\n",
    "# create role for the Lambda function\n",
    "try:\n",
    "    iam_client.create_role(\n",
    "        RoleName=lambda_function_role,\n",
    "        AssumeRolePolicyDocument=json.dumps({\n",
    "            \"Version\": \"2012-10-17\",\n",
    "            \"Statement\": [\n",
    "                {\n",
    "                    \"Effect\": \"Allow\",\n",
    "                    \"Principal\": {\n",
    "                        \"Service\": \"lambda.amazonaws.com\"\n",
    "                    },\n",
    "                    \"Action\": \"sts:AssumeRole\"\n",
    "                }\n",
    "            ]\n",
    "        }),\n",
    "        Description=\"Role for Lambda function to access S3 and other resources\"\n",
    "    )\n",
    "\n",
    "    iam_client.attach_role_policy(\n",
    "        RoleName=lambda_function_role,\n",
    "        PolicyArn=s3_full_access_policy_arn\n",
    "        \n",
    "    )\n",
    "\n",
    "except Exception as e:\n",
    "    print(\"Error creating role: \", e)\n",
    "    print(\"Role already exists. Continuing...\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VariantInterpreter-LambdaExecutionRole\n"
     ]
    }
   ],
   "source": [
    "Role=iam_client.get_role(RoleName=lambda_function_role)['Role']['Arn']\n",
    "print(lambda_function_role)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'ResponseMetadata': {'RequestId': '574bd221-1b82-4c55-85b8-0424f8da97b2',\n",
       "  'HTTPStatusCode': 200,\n",
       "  'HTTPHeaders': {'date': 'Sat, 26 Apr 2025 05:10:30 GMT',\n",
       "   'x-amzn-requestid': '574bd221-1b82-4c55-85b8-0424f8da97b2',\n",
       "   'content-type': 'text/xml',\n",
       "   'content-length': '212'},\n",
       "  'RetryAttempts': 0}}"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iam_client.attach_role_policy(\n",
    "        RoleName=lambda_function_role,\n",
    "        PolicyArn=AWSLambdaBasicExecutionRole_arn\n",
    "    )\n",
    "iam_client.attach_role_policy(\n",
    "    RoleName=lambda_function_role,\n",
    "    PolicyArn=bedrock_policy_arn\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Package up the lambda function code and deploy to Lambda function\n",
    "s = BytesIO()\n",
    "z = zipfile.ZipFile(s, 'w')\n",
    "z.write(\"LambdaAgent/lambda_function.py\", arcname=\"lambda_function.py\")\n",
    "z.close()\n",
    "zip_content = s.getvalue()\n",
    "\n",
    "role_response = iam_client.get_role(RoleName=lambda_function_role)\n",
    "lambda_function_role = role_response['Role']['Arn']\n",
    "\n",
    "response = lambda_client.create_function(\n",
    "    FunctionName=lambda_function_name,\n",
    "    Runtime='python3.12',  # updated to Python 3.12\n",
    "    Role=lambda_function_role,\n",
    "    Handler='lambda_function.lambda_handler',\n",
    "    Code={\n",
    "        'ZipFile': zip_content\n",
    "    },\n",
    "    Timeout=600,  # 10 minutes = 600 seconds\n",
    "    MemorySize=400  # Memory in MB\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#response = lambda_client.update_function_configuration(\n",
    "#    FunctionName=lambda_function_name,\n",
    "#    Handler='lambda_function.lambda_handler'\n",
    "#)\n",
    "\n",
    "#response = lambda_client.update_function_configuration(\n",
    "#     FunctionName=lambda_function_name,\n",
    "#     Timeout=600,  # 10 minutes = 600 seconds\n",
    "#     MemorySize=400  # Memory in MB\n",
    "#)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create IAM policies for agent\n",
    "bedrock_agent_bedrock_allow_policy_statement = {\n",
    "    \"Version\": \"2012-10-17\",\n",
    "    \"Statement\": [\n",
    "        {\n",
    "            \"Sid\": \"AmazonBedrockAgentBedrockFoundationModelPolicy\",\n",
    "            \"Effect\": \"Allow\",\n",
    "            \"Action\": \"bedrock:InvokeModel\",\n",
    "            \"Resource\": [\n",
    "                f\"arn:aws:bedrock:{region}::foundation-model/{agent_foundation_model}\"\n",
    "            ]\n",
    "        }\n",
    "    ]\n",
    "}\n",
    "\n",
    "bedrock_policy_json = json.dumps(bedrock_agent_bedrock_allow_policy_statement)\n",
    "\n",
    "try:\n",
    "    agent_bedrock_policy = iam_client.create_policy(\n",
    "        PolicyName=agent_bedrock_allow_policy_name,\n",
    "        PolicyDocument=bedrock_policy_json\n",
    "    )\n",
    "except Exception:\n",
    "    print(f\"Policy {agent_bedrock_allow_policy_name} already exists\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create IAM Role for the agent and attach IAM policies\n",
    "assume_role_policy_document = {\n",
    "    \"Version\": \"2012-10-17\",\n",
    "    \"Statement\": [{\n",
    "          \"Effect\": \"Allow\",\n",
    "          \"Principal\": {\n",
    "            \"Service\": \"bedrock.amazonaws.com\"\n",
    "          },\n",
    "          \"Action\": \"sts:AssumeRole\"\n",
    "    }]\n",
    "}\n",
    "\n",
    "assume_role_policy_document_json = json.dumps(assume_role_policy_document)\n",
    "try:\n",
    "    agent_role = iam_client.create_role(\n",
    "        RoleName=agent_role_name,\n",
    "        AssumeRolePolicyDocument=assume_role_policy_document_json\n",
    "    )\n",
    "\n",
    "\n",
    "    # Pause to make sure role is created\n",
    "    time.sleep(10)\n",
    "        \n",
    "    iam_client.attach_role_policy(\n",
    "        RoleName=agent_role_name,\n",
    "        PolicyArn=agent_bedrock_policy['Policy']['Arn']\n",
    "    )\n",
    "except Exception as e:\n",
    "    print(f\"Error creating role: {e}. Make sure it doesnt exist already\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'ResponseMetadata': {'RequestId': '9c3fd060-9577-42a4-8b2a-3b8200a5cf03', 'HTTPStatusCode': 202, 'HTTPHeaders': {'date': 'Sat, 26 Apr 2025 05:19:02 GMT', 'content-type': 'application/json', 'content-length': '1851', 'connection': 'keep-alive', 'x-amzn-requestid': '9c3fd060-9577-42a4-8b2a-3b8200a5cf03', 'x-amz-apigw-id': 'JnXvGGM8IAMES4w=', 'x-amzn-trace-id': 'Root=1-680c6cc6-2e44f98059c394852afe8dbc'}, 'RetryAttempts': 0}, 'agent': {'agentArn': 'arn:aws:bedrock:us-east-1:735766051544:agent/BLUBEL66XB', 'agentCollaboration': 'DISABLED', 'agentId': 'BLUBEL66XB', 'agentName': 'VariantInterpreter-Agent', 'agentResourceRoleArn': 'arn:aws:iam::735766051544:role/AmazonBRkExecutionRoleForAgents_VariantInterpreter-Agent', 'agentStatus': 'CREATING', 'createdAt': datetime.datetime(2025, 4, 26, 5, 19, 2, 775000, tzinfo=tzlocal()), 'description': 'Agent for interpreting annotated variant files and answering user Questions', 'foundationModel': 'anthropic.claude-3-sonnet-20240229-v1:0', 'idleSessionTTLInSeconds': 1800, 'instruction': 'You are an expert at analyzing genomics variants with VEP. You have access to a set of tools to help analyze genetic variants for patient including total variants, variants per chromosome, pathogenic variants and the VEP report file.  You have access to two action group functions: retrieve_existing_vep_report and vep_feature_extraction. Always use vep_feature_extraction to provide variants feature summary or gene level summary. Prioritize usin using featue extraction function. Please analyze this data and prepare to answer questions: 1. what is the total variant count in the patient id: “3186764”?; 2. howmany variants are present in chromosome 1?; 3. which chromosome has stronger presence of high-impact variants?; 4. what are those top 5 genes have highest number of high-impact variants?; 5. what is the impact distribution of variants in chromosome 5?; 6. howmany splice region variants are present in STAT3 gene?; 7. which gene has highest stop gained or lost variants?; 8. which gene has highest Non-coding RNA variants?; 9. which are those top 3 genes I should focus for this patient based on variant affecting proteins functional loss?; 10. Are there any SIFT scores available for these top 3 genes?', 'orchestrationType': 'DEFAULT', 'updatedAt': datetime.datetime(2025, 4, 26, 5, 19, 2, 775000, tzinfo=tzlocal())}}\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    response = bedrock_agent_client.create_agent(\n",
    "        agentName=agent_name,\n",
    "        agentResourceRoleArn=agent_role['Role']['Arn'],\n",
    "        description=agent_description,\n",
    "        idleSessionTTLInSeconds=1800,\n",
    "        foundationModel=agent_foundation_model,\n",
    "        instruction=agent_instruction,\n",
    "    )\n",
    "    agent_id = response['agent']['agentId']\n",
    "    print(response)\n",
    "\n",
    "except:\n",
    "    print(\"Agent already exists, skipping creation\")\n",
    "    agent_info = [agent for agent in bedrock_agent_client.list_agents()['agentSummaries'] if agent['agentName']==agent_name][0]\n",
    "    print(agent_info)\n",
    "    agent_id = agent_info['agentId']\n",
    "    agent_version = bedrock_agent_client.list_agent_versions(agentId=agent_id)['agentVersionSummaries'][0]['agentVersion']\n",
    "    response = bedrock_agent_client.list_agent_action_groups(\n",
    "        agentId=agent_id,\n",
    "        agentVersion=agent_version\n",
    "    )\n",
    "    print(response['actionGroupSummaries'][0])\n",
    "    action_group_id = response['actionGroupSummaries'][0]['actionGroupId']\n",
    "    print(f\"Using agent_id {agent_id} and action_group_id {action_group_id}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Agent Action Group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "   agent_functions = [\n",
    "    {\n",
    "        'name': 'vep_feature_extraction',\n",
    "        'description': 'retrieves the VEP annotated VCF features for a given patient id',\n",
    "        'parameters': {\n",
    "            \"patient_id\": {\n",
    "                \"description\": \"the patient_id of the patient for which we want a variant report\",\n",
    "                \"required\": True,\n",
    "                \"type\": \"string\"\n",
    "            }\n",
    "        }\n",
    "    },\n",
    "    {\n",
    "        'name': 'retrieve_existing_vep_report',\n",
    "        'description': 'Starts with an existing VEP report for a given patient id. Returns summary of VEP report',\n",
    "        'parameters': {\n",
    "            \"patient_id\": {\n",
    "                \"description\": \"the patient_id of the patient for which we want to find a summarization of VEP report PDF\",\n",
    "                \"required\": True,\n",
    "                \"type\": \"string\"\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pause to make sure agent is created\n",
    "# time.sleep(30)\n",
    "# Now, we can configure and create an action group here:\n",
    "try:\n",
    "    agent_action_group_response = bedrock_agent_client.create_agent_action_group(\n",
    "    agentId=agent_id,\n",
    "    agentVersion='DRAFT',\n",
    "    actionGroupExecutor={\n",
    "        'lambda': lambda_function_arn\n",
    "    },\n",
    "    actionGroupName=agent_action_group_name,\n",
    "    functionSchema={\n",
    "        'functions': agent_functions\n",
    "    },\n",
    "    description=agent_action_group_description\n",
    ")\n",
    "except:\n",
    "    print(\"Action group already exists\")\n",
    "    agent_action_group_response = bedrock_agent_client.update_agent_action_group(\n",
    "        agentId=agent_id,\n",
    "        actionGroupId=action_group_id,\n",
    "        agentVersion='DRAFT',\n",
    "        actionGroupExecutor={\n",
    "            'lambda': lambda_function_arn\n",
    "        },\n",
    "        actionGroupName=agent_action_group_name,\n",
    "        functionSchema={\n",
    "            'functions': agent_functions\n",
    "        },\n",
    "        description=agent_action_group_description\n",
    "    )\n",
    "    print(agent_action_group_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'ResponseMetadata': {'RequestId': '56936cb5-676e-484f-b5b9-776d60816c29', 'HTTPStatusCode': 201, 'HTTPHeaders': {'date': 'Sat, 26 Apr 2025 05:22:17 GMT', 'content-type': 'application/json', 'content-length': '366', 'connection': 'keep-alive', 'x-amzn-requestid': '56936cb5-676e-484f-b5b9-776d60816c29'}, 'RetryAttempts': 1}, 'Statement': '{\"Sid\":\"allow_bedrock\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"bedrock.amazonaws.com\"},\"Action\":\"lambda:InvokeFunction\",\"Resource\":\"arn:aws:lambda:us-east-1:735766051544:function:VariantInterpreter-735766051544-Lambda\",\"Condition\":{\"ArnLike\":{\"AWS:SourceArn\":\"arn:aws:bedrock:us-east-1:735766051544:agent/BLUBEL66XB\"}}}'}\n"
     ]
    }
   ],
   "source": [
    "# Create allow invoke permission on lambda\n",
    "try:\n",
    "    response = lambda_client.add_permission(\n",
    "        FunctionName=lambda_function_name,\n",
    "        StatementId='allow_bedrock',\n",
    "        Action='lambda:InvokeFunction',\n",
    "        Principal='bedrock.amazonaws.com',\n",
    "        SourceArn=f\"arn:aws:bedrock:{region}:{account_id}:agent/{agent_id}\",\n",
    "    )\n",
    "    print(response)\n",
    "except: \n",
    "    print(\"Permission already exists\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "lambda_function_name"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preparing Agent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'ResponseMetadata': {'RequestId': '6884cad5-b1ba-486d-b084-4b406c6eefaa', 'HTTPStatusCode': 202, 'HTTPHeaders': {'date': 'Sat, 26 Apr 2025 05:23:00 GMT', 'content-type': 'application/json', 'content-length': '119', 'connection': 'keep-alive', 'x-amzn-requestid': '6884cad5-b1ba-486d-b084-4b406c6eefaa', 'x-amz-apigw-id': 'JnYUQHiHIAMElxQ=', 'x-amzn-trace-id': 'Root=1-680c6db4-307497c44a5d81c70456a970'}, 'RetryAttempts': 0}, 'agentId': 'BLUBEL66XB', 'agentStatus': 'PREPARING', 'agentVersion': 'DRAFT', 'preparedAt': datetime.datetime(2025, 4, 26, 5, 23, 0, 726820, tzinfo=tzlocal())}\n"
     ]
    }
   ],
   "source": [
    "response = bedrock_agent_client.prepare_agent(\n",
    "    agentId=agent_id\n",
    ")\n",
    "print(response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

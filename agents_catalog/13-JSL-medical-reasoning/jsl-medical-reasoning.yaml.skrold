AWSTemplateFormatVersion: "2010-09-09"
Description: Creates an agent for interacting with medical reasoning LLM from John Snow Laboratories.
Parameters:
  AgentAliasName:
    Type: String
    Default: "LATEST"
  BedrockModelId:
    Type: String
    Description: The ID of the Foundation Model to use for the Agent
    Default: us.anthropic.claude-3-5-sonnet-20241022-v2:0
  AgentIAMRoleArn:
    Type: String
    Description: The arn for the agent IAM role
  MedicalReasoningModelProductArn:
    Type: String
    Default: "arn:aws:sagemaker:ap-northeast-1 :594846645681:model-package/jsl-medical-reasoning-llm-14b-8f795c2bda713329bfbcd4afd409158d"
    Description: The arn for the Medical Reasoning Model

Conditions:
  CreateAgentAliasCondition: !Not [!Equals [!Ref AgentAliasName, ""]]

Resources:
  ####################
  ##### Endpoint #####
  ####################

  MedicalReasoningEndpoint:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: "sagemaker-marketplace-endpoint.yaml"
      Parameters:
        EndPointName: "Endpoint-Medical-Reasoning-LLM-14B-1"
        ProductARN: !Ref MedicalReasoningModelProductArn
        InstanceType: "ml.g4dn.12xlarge"
        InstanceCount: "1"

  #######################
  ##### ActionGroup #####
  #######################

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "AccessEndpoint"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sagemaker:InvokeEndpoint
                Resource:
                  - !GetAtt MedicalReasoningEndpoint.Outputs.EndpointArn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          ACTION_GROUP: "SearchLambdaActionGroup"
          LOG_LEVEL: "DEBUG"
          ENDPOINT_NAME_1: !GetAtt MedicalReasoningEndpoint.Outputs.EndpointName
      PackageType: Zip
      Code: "action-groups/medical-reasoning"

  LambdaAgentPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*

  LambdaAgentAliasPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*

  ###################
  ##### Agent #####
  ###################

  Agent:
    Type: AWS::Bedrock::Agent
    Properties:
      ActionGroups:
        - ActionGroupName: "UserInputAction"
          ParentActionGroupSignature: "AMAZON.UserInput"
          ActionGroupState: "ENABLED"
        - ActionGroupName: MedicalReasoning
          Description: Process patient symptoms, test results, and medical histories, employing structured reasoning patterns to recommend subsequent actions aligned with clinical guidelines.
          ActionGroupExecutor:
            Lambda: !GetAtt LambdaFunction.Arn
          ActionGroupState: ENABLED
          FunctionSchema:
            Functions:
              - Name: consult_with_medical_reasoning_model
                Description: "Consult with a healthcare-specific LLM that provides advanced clinical decision support. Use this tol wihen you need to mimics a clinician's thought process rather than simple information lookup. This model excels at analyzing complex patient cases by evaluating multiple diagnostic hypotheses, acknowledging medical uncertainties, and following structured reasoning frameworks. Healthcare professionals should deploy it when transparency in decision-making is crucial, as it provides clear explanations for its conclusions while incorporating up-to-date medical knowledge. Unlike reference tools, this cognitive assistant supports nuanced diagnostic and treatment decisions by processing symptoms, test results, and patient histories to recommend evidence-based next steps aligned with clinical guidelines."
                Parameters:
                  medical_text:
                    Description: "Unstructured medical text"
                    Type: string
                    Required: True
      AgentName: John-Snow-Labs-Medical-Reasoning
      AgentResourceRoleArn: !Ref AgentIAMRoleArn
      AutoPrepare: True
      Description: "Use clinical guidelines and structured reasoning patterns to process patient information and recommend next steps."
      FoundationModel: !Ref BedrockModelId
      GuardrailConfiguration:
        GuardrailIdentifier: !GetAtt JSLMedicalReasoningGuardrail.GuardrailId
        GuardrailVersion: !GetAtt JSLMedicalReasoningGuardrail.Version
      Instruction: |
        You are a helpful AI assistant designed to help physicians answer questions. You have access to a medical reasoning LLM that was specially training to handle healthcare-specific questions. As an AI medical assistant, always consult the medical reasoning LLM (Model 14 B) for any healthcare-specific questions before responding. When doing so, provide all relevant patient information available. Present the medical reasoning LLM's structured analysis clearly, emphasizing when information comes from this specialized system rather than your general knowledge. Include the reasoning pathways, alternative hypotheses, and any uncertainties identified by the medical reasoning LLM. Never provide medical advice based solely on your general knowledge. For non-medical questions, respond using your general capabilities while maintaining patient confidentiality at all times.
  AgentAliasResource:
    Type: AWS::Bedrock::AgentAlias
    Condition: CreateAgentAliasCondition
    Properties:
      AgentId: !GetAtt Agent.AgentId
      AgentAliasName: !Ref AgentAliasName

  JSLMedicalReasoningGuardrail:
    Type: AWS::Bedrock::Guardrail
    Properties:
      BlockedInputMessaging: "Sorry, your query violates our usage policies."
      BlockedOutputsMessaging: "Sorry, I am unable to reply because the output violates our usage policies."
      ContentPolicyConfig:
        FiltersConfig:
          - InputStrength: "HIGH"
            OutputStrength: "HIGH"
            Type: "MISCONDUCT"
          - InputStrength: "HIGH"
            OutputStrength: "NONE"
            Type: "PROMPT_ATTACK"
      Description: Turn on to block profane words and other harmful content.
      Name: JSLMedicalReasoningGuardrail
      WordPolicyConfig:
        ManagedWordListsConfig:
          - Type: PROFANITY

Outputs:
  AgentId:
    Description: Agent ID
    Value: !Ref Agent
  AgentAliasId:
    Description: Agent Alias ID
    Value: !GetAtt AgentAliasResource.AgentAliasId
    Condition: CreateAgentAliasCondition
